var searchIndex = {};
searchIndex['quasi'] = {"items":[[0,"","quasi","",null,null],[5,"parse_expr_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[8,"ToTokens","","",null,null],[10,"to_tokens","","",0,{"inputs":[{"name":"totokens"},{"name":"extctxt"}],"output":{"name":"vec"}}],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",1,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_expr","","",1,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_stmt","","",1,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_tts","","",1,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",2,{"inputs":[{"name":"tokentree"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",4,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","core::option","",5,{"inputs":[{"name":"option"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",6,{"inputs":[{"name":"ident"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",7,{"inputs":[{"name":"path"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",8,{"inputs":[{"name":"ty"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",10,{"inputs":[{"name":"generics"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"whereclause"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",12,{"inputs":[{"name":"arm"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",9,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","quasi","",13,{"inputs":[{"name":"attribute"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",14,{"inputs":[{"name":"lit"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntax::ext::base","",15,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",15,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_expr","","",15,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",15,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"vec"}}]],"paths":[[8,"ToTokens"],[8,"ExtParseUtils"],[4,"TokenTree"],[3,"Vec"],[3,"Spanned"],[4,"Option"],[3,"Ident"],[3,"Path"],[3,"Ty"],[3,"P"],[3,"Generics"],[3,"WhereClause"],[3,"Arm"],[6,"Attribute"],[6,"Lit"],[3,"ExtCtxt"]]};
searchIndex['syntex_syntax'] = {"items":[[0,"","syntex_syntax","The Rust parser and macro expander.",null,null],[0,"util","","",null,null],[0,"interner","syntex_syntax::util","An \"interner\" is a data structure that associates values with usize tags and\nallows bidirectional lookup; i.e. given a value, one can easily find the\ntype, and vice versa.",null,null],[3,"Interner","syntex_syntax::util::interner","",null,null],[3,"RcStr","","",null,null],[3,"StrInterner","","A StrInterner differs from Interner<String> in that it accepts\n&str rather than RcStr, resulting in less allocation.",null,null],[11,"new","","",0,{"inputs":[{"name":"interner"}],"output":{"name":"interner"}}],[11,"prefill","","",0,null],[11,"intern","","",0,{"inputs":[{"name":"interner"},{"name":"t"}],"output":{"name":"name"}}],[11,"gensym","","",0,{"inputs":[{"name":"interner"},{"name":"t"}],"output":{"name":"name"}}],[11,"get","","",0,{"inputs":[{"name":"interner"},{"name":"name"}],"output":{"name":"t"}}],[11,"len","","",0,{"inputs":[{"name":"interner"}],"output":{"name":"usize"}}],[11,"find","","",0,{"inputs":[{"name":"interner"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear","","",0,{"inputs":[{"name":"interner"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"rcstr"}],"output":{"name":"rcstr"}}],[11,"new","","",1,{"inputs":[{"name":"rcstr"},{"name":"str"}],"output":{"name":"rcstr"}}],[11,"cmp","","",1,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"rcstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"rcstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",1,{"inputs":[{"name":"rcstr"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"rcstr"}],"output":{"name":"str"}}],[11,"new","","",2,{"inputs":[{"name":"strinterner"}],"output":{"name":"strinterner"}}],[11,"prefill","","",2,null],[11,"intern","","",2,{"inputs":[{"name":"strinterner"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym","","",2,{"inputs":[{"name":"strinterner"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",2,{"inputs":[{"name":"strinterner"},{"name":"name"}],"output":{"name":"name"}}],[11,"get","","",2,{"inputs":[{"name":"strinterner"},{"name":"name"}],"output":{"name":"rcstr"}}],[11,"len","","",2,{"inputs":[{"name":"strinterner"}],"output":{"name":"usize"}}],[11,"find","","",2,{"inputs":[{"name":"strinterner"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear","","",2,{"inputs":[{"name":"strinterner"}],"output":null}],[11,"reset","","",2,{"inputs":[{"name":"strinterner"},{"name":"strinterner"}],"output":null}],[0,"node_count","syntex_syntax::util","",null,null],[3,"NodeCounter","syntex_syntax::util::node_count","",null,null],[12,"count","","",3,null],[11,"new","","",3,{"inputs":[{"name":"nodecounter"}],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",3,{"inputs":[{"name":"nodecounter"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",3,{"inputs":[{"name":"nodecounter"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",3,{"inputs":[{"name":"nodecounter"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",3,{"inputs":[{"name":"nodecounter"},{"name":"item"}],"output":null}],[11,"visit_local","","",3,{"inputs":[{"name":"nodecounter"},{"name":"local"}],"output":null}],[11,"visit_block","","",3,{"inputs":[{"name":"nodecounter"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",3,{"inputs":[{"name":"nodecounter"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",3,{"inputs":[{"name":"nodecounter"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",3,{"inputs":[{"name":"nodecounter"},{"name":"pat"}],"output":null}],[11,"visit_decl","","",3,{"inputs":[{"name":"nodecounter"},{"name":"decl"}],"output":null}],[11,"visit_expr","","",3,{"inputs":[{"name":"nodecounter"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",3,{"inputs":[{"name":"nodecounter"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",3,{"inputs":[{"name":"nodecounter"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",3,{"inputs":[{"name":"nodecounter"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",3,{"inputs":[{"name":"nodecounter"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",3,{"inputs":[{"name":"nodecounter"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",3,{"inputs":[{"name":"nodecounter"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",3,{"inputs":[{"name":"nodecounter"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",3,{"inputs":[{"name":"nodecounter"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",3,{"inputs":[{"name":"nodecounter"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",3,{"inputs":[{"name":"nodecounter"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",3,{"inputs":[{"name":"nodecounter"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",3,{"inputs":[{"name":"nodecounter"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",3,{"inputs":[{"name":"nodecounter"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",3,{"inputs":[{"name":"nodecounter"},{"name":"lifetimedef"}],"output":null}],[11,"visit_explicit_self","","",3,{"inputs":[{"name":"nodecounter"},{"name":"explicitself"}],"output":null}],[11,"visit_mac","","",3,{"inputs":[{"name":"nodecounter"},{"name":"mac"}],"output":null}],[11,"visit_path","","",3,{"inputs":[{"name":"nodecounter"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",3,{"inputs":[{"name":"nodecounter"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_parameters","","",3,{"inputs":[{"name":"nodecounter"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",3,{"inputs":[{"name":"nodecounter"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",3,{"inputs":[{"name":"nodecounter"},{"name":"attribute"}],"output":null}],[11,"visit_macro_def","","",3,{"inputs":[{"name":"nodecounter"},{"name":"macrodef"}],"output":null}],[0,"parser","syntex_syntax::util","",null,null],[4,"AssocOp","syntex_syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",4,null],[13,"Subtract","","`-`",4,null],[13,"Multiply","","`*`",4,null],[13,"Divide","","`/`",4,null],[13,"Modulus","","`%`",4,null],[13,"LAnd","","`&&`",4,null],[13,"LOr","","`||`",4,null],[13,"BitXor","","`^`",4,null],[13,"BitAnd","","`&`",4,null],[13,"BitOr","","`|`",4,null],[13,"ShiftLeft","","`<<`",4,null],[13,"ShiftRight","","`>>`",4,null],[13,"Equal","","`==`",4,null],[13,"Less","","`<`",4,null],[13,"LessEqual","","`<=`",4,null],[13,"NotEqual","","`!=`",4,null],[13,"Greater","","`>`",4,null],[13,"GreaterEqual","","`>=`",4,null],[13,"Assign","","`=`",4,null],[13,"Inplace","","`<-`",4,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",4,null],[13,"As","","`as`",4,null],[13,"DotDot","","`..` range",4,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",5,null],[13,"Right","","The operator is right-associative",5,null],[13,"None","","The operator is not associative",5,null],[11,"eq","","",4,{"inputs":[{"name":"assocop"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"assocop"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"assocop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"fixity"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"fixity"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"fixity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_token","","Create a new AssocOP from a token",4,{"inputs":[{"name":"assocop"},{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOp_.",4,{"inputs":[{"name":"assocop"},{"name":"binop_"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",4,{"inputs":[{"name":"assocop"}],"output":{"name":"usize"}}],[11,"fixity","","Gets the fixity of this operator",4,{"inputs":[{"name":"assocop"}],"output":{"name":"fixity"}}],[11,"is_comparison","","",4,{"inputs":[{"name":"assocop"}],"output":{"name":"bool"}}],[11,"is_assign_like","","",4,{"inputs":[{"name":"assocop"}],"output":{"name":"bool"}}],[11,"to_ast_binop","","",4,{"inputs":[{"name":"assocop"}],"output":{"name":"option"}}],[0,"small_vector","syntex_syntax::util","",null,null],[3,"SmallVector","syntex_syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1",null,null],[3,"IntoIter","","",null,null],[11,"from_iter","","",6,{"inputs":[{"name":"smallvector"},{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",6,{"inputs":[{"name":"smallvector"},{"name":"i"}],"output":null}],[11,"zero","","",6,{"inputs":[{"name":"smallvector"}],"output":{"name":"smallvector"}}],[11,"one","","",6,{"inputs":[{"name":"smallvector"},{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",6,{"inputs":[{"name":"smallvector"},{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",6,null],[11,"pop","","",6,{"inputs":[{"name":"smallvector"}],"output":{"name":"option"}}],[11,"push","","",6,{"inputs":[{"name":"smallvector"},{"name":"t"}],"output":null}],[11,"push_all","","",6,{"inputs":[{"name":"smallvector"},{"name":"smallvector"}],"output":null}],[11,"get","","",6,{"inputs":[{"name":"smallvector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"expect_one","","",6,{"inputs":[{"name":"smallvector"},{"name":"str"}],"output":{"name":"t"}}],[11,"into_iter","","",6,{"inputs":[{"name":"smallvector"}],"output":{"name":"intoiter"}}],[11,"len","","",6,{"inputs":[{"name":"smallvector"}],"output":{"name":"usize"}}],[11,"is_empty","","",6,{"inputs":[{"name":"smallvector"}],"output":{"name":"bool"}}],[11,"next","","",7,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"move_map","","",6,{"inputs":[{"name":"smallvector"},{"name":"f"}],"output":{"name":"smallvector"}}],[0,"diagnostics","syntex_syntax","",null,null],[0,"plugin","syntex_syntax::diagnostics","",null,null],[3,"ErrorInfo","syntex_syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",8,null],[12,"use_site","","",8,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"registry","syntex_syntax::diagnostics","",null,null],[3,"Registry","syntex_syntax::diagnostics::registry","",null,null],[11,"clone","","",9,{"inputs":[{"name":"registry"}],"output":{"name":"registry"}}],[11,"new","","",9,null],[11,"find_description","","",9,{"inputs":[{"name":"registry"},{"name":"str"}],"output":{"name":"option"}}],[0,"metadata","syntex_syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntex_syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",10,null],[12,"use_site","","",10,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",11,null],[12,"line","","",11,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"encode","","",10,{"inputs":[{"name":"errormetadata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"errormetadata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"errormetadata"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"errormetadata"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"encode","","",11,{"inputs":[{"name":"errorlocation"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"errorlocation"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"errorlocation"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"errorlocation"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"from_span","","Create an error location from a span.",11,{"inputs":[{"name":"errorlocation"},{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"syntax","syntex_syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntex_syntax::abi","",null,null],[4,"Os","","",null,null],[13,"OsWindows","","",12,null],[13,"OsMacos","","",12,null],[13,"OsLinux","","",12,null],[13,"OsAndroid","","",12,null],[13,"OsFreebsd","","",12,null],[13,"OsiOS","","",12,null],[13,"OsDragonfly","","",12,null],[13,"OsBitrig","","",12,null],[13,"OsNetbsd","","",12,null],[13,"OsOpenbsd","","",12,null],[13,"OsNaCl","","",12,null],[4,"Abi","","",null,null],[13,"Cdecl","","",13,null],[13,"Stdcall","","",13,null],[13,"Fastcall","","",13,null],[13,"Aapcs","","",13,null],[13,"Win64","","",13,null],[13,"Rust","","",13,null],[13,"C","","",13,null],[13,"System","","",13,null],[13,"RustIntrinsic","","",13,null],[13,"RustCall","","",13,null],[13,"PlatformIntrinsic","","",13,null],[4,"Architecture","","",null,null],[13,"X86","","",14,null],[13,"X86_64","","",14,null],[13,"Arm","","",14,null],[13,"Mips","","",14,null],[13,"Mipsel","","",14,null],[4,"AbiArchitecture","","",null,null],[13,"RustArch","","Not a real ABI (e.g., intrinsic)",15,null],[13,"AllArch","","An ABI that specifies cross-platform defaults (e.g., \"C\")",15,null],[13,"Archs","","Multiple architectures (bitset)",15,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",12,{"inputs":[{"name":"os"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"os"},{"name":"os"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"os"},{"name":"os"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"os"}],"output":{"name":"os"}}],[11,"fmt","","",13,{"inputs":[{"name":"abi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"abi"}],"output":{"name":"abi"}}],[11,"decode","","",13,{"inputs":[{"name":"abi"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"abi"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"abi"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"abi"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"architecture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"architecture"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"architecture"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"architecture"}],"output":{"name":"architecture"}}],[11,"clone","","",16,{"inputs":[{"name":"abidata"}],"output":{"name":"abidata"}}],[11,"clone","","",15,{"inputs":[{"name":"abiarchitecture"}],"output":{"name":"abiarchitecture"}}],[11,"index","","",13,{"inputs":[{"name":"abi"}],"output":{"name":"usize"}}],[11,"data","","",13,{"inputs":[{"name":"abi"}],"output":{"name":"abidata"}}],[11,"name","","",13,{"inputs":[{"name":"abi"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"abi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"os"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ast","syntex_syntax","",null,null],[3,"Name","syntex_syntax::ast","A name is a part of an identifier, representing a string or gensym. It's\nthe result of interning.",null,null],[3,"SyntaxContext","","A SyntaxContext represents a chain of macro-expandings\nand renamings. Each macro expansion corresponds to\na fresh u32. This u32 is a reference to a table stored",null,null],[3,"Ident","","An identifier contains a Name (index into the interner\ntable) and a SyntaxContext to track renaming and\nmacro expansion per Flatt et al., \"Macros That Work Together\"",null,null],[12,"name","","",17,null],[12,"ctxt","","",17,null],[3,"Lifetime","","",null,null],[12,"id","","",18,null],[12,"span","","",18,null],[12,"name","","",18,null],[3,"LifetimeDef","","A lifetime definition, eg `'a: 'b+'c+'d`",null,null],[12,"lifetime","","",19,null],[12,"bounds","","",19,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name; for instance:\nstd::cmp::PartialEq  .  It's represented as a sequence of identifiers,\nalong with a bunch of supporting information.",null,null],[12,"span","","",20,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",20,null],[12,"segments","","The segments in the path: the things separated by `::`.",20,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of\ntypes.",null,null],[12,"identifier","","The identifier portion of this path segment.",21,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",21,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",22,null],[12,"types","","The type parameters for this path segment, if present.",22,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.\nE.g., `Foo<A=Bar>`.",22,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",23,null],[12,"inputs","","`(A,B)`",23,null],[12,"output","","`C`",23,null],[3,"TyParam","","",null,null],[12,"ident","","",24,null],[12,"id","","",24,null],[12,"bounds","","",24,null],[12,"default","","",24,null],[12,"span","","",24,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",25,null],[12,"ty_params","","",25,null],[12,"where_clause","","",25,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",26,null],[12,"predicates","","",26,null],[3,"WhereBoundPredicate","","A type bound, eg `for<'c> Foo: Send+Clone+'c`",null,null],[12,"span","","",27,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",27,null],[12,"bounded_ty","","The type being bounded",27,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,null],[3,"WhereRegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",null,null],[12,"span","","",28,null],[12,"lifetime","","",28,null],[12,"bounds","","",28,null],[3,"WhereEqPredicate","","An equality predicate (unsupported), e.g. `T=int`",null,null],[12,"id","","",29,null],[12,"span","","",29,null],[12,"path","","",29,null],[12,"ty","","",29,null],[3,"Crate","","",null,null],[12,"module","","",30,null],[12,"attrs","","",30,null],[12,"config","","",30,null],[12,"span","","",30,null],[12,"exported_macros","","",30,null],[3,"Block","","",null,null],[12,"stmts","","Statements in a block",31,null],[12,"expr","","An expression at the end of the block\nwithout a semicolon, if any",31,null],[12,"id","","",31,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",31,null],[12,"span","","",31,null],[3,"Pat","","",null,null],[12,"id","","",32,null],[12,"node","","",32,null],[12,"span","","",32,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",33,null],[12,"pat","","The pattern the field is destructured to",33,null],[12,"is_shorthand","","",33,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",34,null],[12,"ty","","",34,null],[12,"init","","Initializer expression to set the value, if any",34,null],[12,"id","","",34,null],[12,"span","","",34,null],[3,"Arm","","represents one arm of a 'match'",null,null],[12,"attrs","","",35,null],[12,"pats","","",35,null],[12,"guard","","",35,null],[12,"body","","",35,null],[3,"Field","","",null,null],[12,"ident","","",36,null],[12,"expr","","",36,null],[12,"span","","",36,null],[3,"Expr","","An expression",null,null],[12,"id","","",37,null],[12,"node","","",37,null],[12,"span","","",37,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",38,null],[12,"position","","",38,null],[3,"Delimited","","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",39,null],[12,"open_span","","The span covering the opening delimiter",39,null],[12,"tts","","The delimited sequence of token trees",39,null],[12,"close_span","","The span covering the closing delimiter",39,null],[3,"SequenceRepetition","","A sequence of token treesee",null,null],[12,"tts","","The sequence of token trees",40,null],[12,"separator","","The optional separator",40,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",40,null],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",40,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.",null,null],[12,"path","","",41,null],[12,"tts","","",41,null],[12,"ctxt","","",41,null],[3,"MutTy","","",null,null],[12,"ty","","",42,null],[12,"mutbl","","",42,null],[3,"MethodSig","","Represents a method's signature in a trait declaration,\nor in an implementation.",null,null],[12,"unsafety","","",43,null],[12,"constness","","",43,null],[12,"abi","","",43,null],[12,"decl","","",43,null],[12,"generics","","",43,null],[12,"explicit_self","","",43,null],[3,"TraitItem","","Represents a method declaration in a trait declaration, possibly including\na default implementation A trait method is either required (meaning it\ndoesn't have an implementation, just a signature) or provided (meaning it\nhas a default implementation).",null,null],[12,"id","","",44,null],[12,"ident","","",44,null],[12,"attrs","","",44,null],[12,"node","","",44,null],[12,"span","","",44,null],[3,"ImplItem","","",null,null],[12,"id","","",45,null],[12,"ident","","",45,null],[12,"vis","","",45,null],[12,"attrs","","",45,null],[12,"node","","",45,null],[12,"span","","",45,null],[3,"TypeBinding","","",null,null],[12,"id","","",46,null],[12,"ident","","",46,null],[12,"ty","","",46,null],[12,"span","","",46,null],[3,"Ty","","",null,null],[12,"id","","",47,null],[12,"node","","",47,null],[12,"span","","",47,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",48,null],[12,"abi","","",48,null],[12,"lifetimes","","",48,null],[12,"decl","","",48,null],[3,"InlineAsm","","",null,null],[12,"asm","","",49,null],[12,"asm_str_style","","",49,null],[12,"outputs","","",49,null],[12,"inputs","","",49,null],[12,"clobbers","","",49,null],[12,"volatile","","",49,null],[12,"alignstack","","",49,null],[12,"dialect","","",49,null],[12,"expn_id","","",49,null],[3,"Arg","","represents an argument in a function header",null,null],[12,"ty","","",50,null],[12,"pat","","",50,null],[12,"id","","",50,null],[3,"FnDecl","","Represents the header (not the body) of a function declaration",null,null],[12,"inputs","","",51,null],[12,"output","","",51,null],[12,"variadic","","",51,null],[3,"Mod","","",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",52,null],[12,"items","","",52,null],[3,"ForeignMod","","",null,null],[12,"abi","","",53,null],[12,"items","","",53,null],[3,"EnumDef","","",null,null],[12,"variants","","",54,null],[3,"Variant_","","",null,null],[12,"name","","",55,null],[12,"attrs","","",55,null],[12,"data","","",55,null],[12,"disr_expr","","Explicit discriminant, eg `Foo = 1`",55,null],[3,"AttrId","","",null,null],[3,"Attribute_","","Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",56,null],[12,"style","","",56,null],[12,"value","","",56,null],[12,"is_sugared_doc","","",56,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",57,null],[12,"ref_id","","",57,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",58,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",58,null],[12,"span","","",58,null],[3,"StructField_","","",null,null],[12,"kind","","",59,null],[12,"id","","",59,null],[12,"ty","","",59,null],[12,"attrs","","",59,null],[3,"Item","","An item",null,null],[12,"ident","","",60,null],[12,"attrs","","",60,null],[12,"id","","",60,null],[12,"node","","",60,null],[12,"vis","","",60,null],[12,"span","","",60,null],[3,"ForeignItem","","",null,null],[12,"ident","","",61,null],[12,"attrs","","",61,null],[12,"node","","",61,null],[12,"id","","",61,null],[12,"span","","",61,null],[12,"vis","","",61,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"ident","","",62,null],[12,"attrs","","",62,null],[12,"id","","",62,null],[12,"span","","",62,null],[12,"imported_from","","",62,null],[12,"export","","",62,null],[12,"use_locally","","",62,null],[12,"allow_internal_unstable","","",62,null],[12,"body","","",62,null],[4,"PathParameters","","",null,null],[13,"AngleBracketedParameters","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",63,null],[13,"ParenthesizedParameters","","The `(A,B)` and `C` in `Foo(A,B) -> C`",63,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe \"special\" built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",64,null],[13,"RegionTyParamBound","","",64,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",65,null],[13,"Maybe","","",65,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, eg `for<'c> Foo: Send+Clone+'c`",66,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",66,null],[13,"EqPredicate","","An equality predicate (unsupported)",66,null],[4,"MetaItem_","","",null,null],[13,"MetaWord","","",67,null],[13,"MetaList","","",67,null],[13,"MetaNameValue","","",67,null],[4,"BindingMode","","",null,null],[13,"BindByRef","","",68,null],[13,"BindByValue","","",68,null],[4,"Pat_","","",null,null],[13,"PatWild","","Represents a wildcard pattern (`_`)",69,null],[13,"PatIdent","","A PatIdent may either be a new bound variable,\nor a nullary enum (in which case the third field\nis None).",69,null],[13,"PatEnum","","\"None\" means a `Variant(..)` pattern where we don't bind the fields to names.",69,null],[13,"PatQPath","","An associated const named using the qualified path `<T>::CONST` or\n`<T as Trait>::CONST`. Associated consts from inherent impls can be\nreferred to as simply `T::CONST`, in which case they will end up as\nPatEnum, and the resolver will have to sort that out.",69,null],[13,"PatStruct","","Destructuring of a struct, e.g. `Foo {x, y, ..}`\nThe `bool` is `true` in the presence of a `..`",69,null],[13,"PatTup","","A tuple pattern `(a, b)`",69,null],[13,"PatBox","","A `box` pattern",69,null],[13,"PatRegion","","A reference pattern, e.g. `&mut (a, b)`",69,null],[13,"PatLit","","A literal",69,null],[13,"PatRange","","A range pattern, e.g. `1...2`",69,null],[13,"PatVec","","`[a, b, ..i, y, z]` is represented as:\n`PatVec(box [a, b], Some(i), box [y, z])`",69,null],[13,"PatMac","","A macro pattern; pre-expansion",69,null],[4,"Mutability","","",null,null],[13,"MutMutable","","",70,null],[13,"MutImmutable","","",70,null],[4,"BinOp_","","",null,null],[13,"BiAdd","","The `+` operator (addition)",71,null],[13,"BiSub","","The `-` operator (subtraction)",71,null],[13,"BiMul","","The `*` operator (multiplication)",71,null],[13,"BiDiv","","The `/` operator (division)",71,null],[13,"BiRem","","The `%` operator (modulus)",71,null],[13,"BiAnd","","The `&&` operator (logical and)",71,null],[13,"BiOr","","The `||` operator (logical or)",71,null],[13,"BiBitXor","","The `^` operator (bitwise xor)",71,null],[13,"BiBitAnd","","The `&` operator (bitwise and)",71,null],[13,"BiBitOr","","The `|` operator (bitwise or)",71,null],[13,"BiShl","","The `<<` operator (shift left)",71,null],[13,"BiShr","","The `>>` operator (shift right)",71,null],[13,"BiEq","","The `==` operator (equality)",71,null],[13,"BiLt","","The `<` operator (less than)",71,null],[13,"BiLe","","The `<=` operator (less than or equal to)",71,null],[13,"BiNe","","The `!=` operator (not equal to)",71,null],[13,"BiGe","","The `>=` operator (greater than or equal to)",71,null],[13,"BiGt","","The `>` operator (greater than)",71,null],[4,"UnOp","","",null,null],[13,"UnDeref","","The `*` operator for dereferencing",72,null],[13,"UnNot","","The `!` operator for logical inversion",72,null],[13,"UnNeg","","The `-` operator for negation",72,null],[4,"Stmt_","","",null,null],[13,"StmtDecl","","Could be an item or a local (let) binding:",73,null],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",73,null],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",73,null],[13,"StmtMac","","",73,null],[4,"MacStmtStyle","","",null,null],[13,"MacStmtWithSemicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n`foo!(...);`, `foo![...];`",74,null],[13,"MacStmtWithBraces","","The macro statement had braces; e.g. foo! { ... }",74,null],[13,"MacStmtWithoutBraces","","The macro statement had parentheses or brackets and no semicolon; e.g.\n`foo!(...)`. All of these will end up being converted into macro\nexpressions.",74,null],[4,"Decl_","","",null,null],[13,"DeclLocal","","A local (let) binding:",75,null],[13,"DeclItem","","An item binding:",75,null],[4,"BlockCheckMode","","",null,null],[13,"DefaultBlock","","",76,null],[13,"UnsafeBlock","","",76,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",77,null],[13,"UserProvided","","",77,null],[4,"Expr_","","",null,null],[13,"ExprBox","","A `box x` expression.",78,null],[13,"ExprInPlace","","First expr is the place; second expr is the value.",78,null],[13,"ExprVec","","An array (`[a, b, c, d]`)",78,null],[13,"ExprCall","","A function call",78,null],[13,"ExprMethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",78,null],[13,"ExprTup","","A tuple (`(a, b, c ,d)`)",78,null],[13,"ExprBinary","","A binary operation (For example: `a + b`, `a * b`)",78,null],[13,"ExprUnary","","A unary operation (For example: `!x`, `*x`)",78,null],[13,"ExprLit","","A literal (For example: `1u8`, `\"foo\"`)",78,null],[13,"ExprCast","","A cast (`foo as f64`)",78,null],[13,"ExprIf","","An `if` block, with an optional else block",78,null],[13,"ExprIfLet","","An `if let` expression with an optional else block",78,null],[13,"ExprWhile","","A while loop, with an optional label",78,null],[13,"ExprWhileLet","","A while-let loop, with an optional label",78,null],[13,"ExprForLoop","","A for loop, with an optional label",78,null],[13,"ExprLoop","","Conditionless loop (can be exited with break, continue, or return)",78,null],[13,"ExprMatch","","A `match` block.",78,null],[13,"ExprClosure","","A closure (for example, `move |a, b, c| {a + b + c}`)",78,null],[13,"ExprBlock","","A block (`{ ... }`)",78,null],[13,"ExprAssign","","An assignment (`a = foo()`)",78,null],[13,"ExprAssignOp","","An assignment with an operator",78,null],[13,"ExprField","","Access of a named struct field (`obj.foo`)",78,null],[13,"ExprTupField","","Access of an unnamed field of a struct or tuple-struct",78,null],[13,"ExprIndex","","An indexing operation (`foo[2]`)",78,null],[13,"ExprRange","","A range (`1..2`, `1..`, or `..2`)",78,null],[13,"ExprPath","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::<baz>.",78,null],[13,"ExprAddrOf","","A referencing operation (`&a` or `&mut a`)",78,null],[13,"ExprBreak","","A `break`, with an optional label to break",78,null],[13,"ExprAgain","","A `continue`, with an optional label",78,null],[13,"ExprRet","","A `return`, with an optional value to be returned",78,null],[13,"ExprInlineAsm","","Output of the `asm!()` macro",78,null],[13,"ExprMac","","A macro invocation; pre-expansion",78,null],[13,"ExprStruct","","A struct literal expression.",78,null],[13,"ExprRepeat","","An array literal constructed from one repeated element.",78,null],[13,"ExprParen","","No-op: used solely so we can pretty-print faithfully",78,null],[4,"CaptureClause","","",null,null],[13,"CaptureByValue","","",79,null],[13,"CaptureByRef","","",79,null],[4,"KleeneOp","","A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\nfor token sequences.",null,null],[13,"ZeroOrMore","","",80,null],[13,"OneOrMore","","",80,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\nparses the arguments to the invocation as a token-tree. This is a very\nloose structure, such that all sorts of different AST-fragments can\nbe passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",81,null],[13,"Delimited","","A delimited sequence of token trees",81,null],[13,"Sequence","","A kleene-style repetition sequence with a span",81,null],[4,"StrStyle","","",null,null],[13,"CookedStr","","A regular string, like `\"foo\"`",82,null],[13,"RawStr","","A raw string, like `r##\"foo\"##`",82,null],[4,"Sign","","",null,null],[13,"Minus","","",83,null],[13,"Plus","","",83,null],[4,"LitIntType","","",null,null],[13,"SignedIntLit","","",84,null],[13,"UnsignedIntLit","","",84,null],[13,"UnsuffixedIntLit","","",84,null],[4,"Lit_","","",null,null],[13,"LitStr","","A string literal (`\"foo\"`)",85,null],[13,"LitByteStr","","A byte string (`b\"foo\"`)",85,null],[13,"LitByte","","A byte char (`b'f'`)",85,null],[13,"LitChar","","A character literal (`'a'`)",85,null],[13,"LitInt","","An integer literal (`1u8`)",85,null],[13,"LitFloat","","A float literal (`1f64` or `1E10f64`)",85,null],[13,"LitFloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",85,null],[13,"LitBool","","A boolean literal",85,null],[4,"TraitItem_","","",null,null],[13,"ConstTraitItem","","",86,null],[13,"MethodTraitItem","","",86,null],[13,"TypeTraitItem","","",86,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",87,null],[13,"Method","","",87,null],[13,"Type","","",87,null],[13,"Macro","","",87,null],[4,"IntTy","","",null,null],[13,"TyIs","","",88,null],[13,"TyI8","","",88,null],[13,"TyI16","","",88,null],[13,"TyI32","","",88,null],[13,"TyI64","","",88,null],[4,"UintTy","","",null,null],[13,"TyUs","","",89,null],[13,"TyU8","","",89,null],[13,"TyU16","","",89,null],[13,"TyU32","","",89,null],[13,"TyU64","","",89,null],[4,"FloatTy","","",null,null],[13,"TyF32","","",90,null],[13,"TyF64","","",90,null],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path.",null,null],[13,"TyInt","","",91,null],[13,"TyUint","","",91,null],[13,"TyFloat","","",91,null],[13,"TyStr","","",91,null],[13,"TyBool","","",91,null],[13,"TyChar","","",91,null],[4,"Ty_","","The different kinds of types recognized by the compiler",null,null],[13,"TyVec","","",92,null],[13,"TyFixedLengthVec","","A fixed length array (`[T; n]`)",92,null],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",92,null],[13,"TyRptr","","A reference (`&'a T` or `&'a mut T`)",92,null],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -> bool`)",92,null],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",92,null],[13,"TyPath","","A path (`module::module::...::Type`), optionally\n\"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",92,null],[13,"TyObjectSum","","Something like `A+B`. Note that `B` must always be a path.",92,null],[13,"TyPolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",92,null],[13,"TyParen","","No-op; kept solely so that we can pretty-print faithfully",92,null],[13,"TyTypeof","","Unused for now",92,null],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",92,null],[13,"TyMac","","",92,null],[4,"AsmDialect","","",null,null],[13,"Att","","",93,null],[13,"Intel","","",93,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",94,null],[13,"Normal","","",94,null],[4,"Constness","","",null,null],[13,"Const","","",95,null],[13,"NotConst","","",95,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",96,null],[13,"Negative","","`impl !Trait for Type`",96,null],[4,"FunctionRetTy","","",null,null],[13,"NoReturn","","Functions with return type `!`that always\nraise an error or exit (i.e. never return to the caller)",97,null],[13,"DefaultReturn","","Return type is not specified.",97,null],[13,"Return","","Everything else",97,null],[4,"ExplicitSelf_","","Represents the kind of 'self' associated with a method",null,null],[13,"SelfStatic","","No self",98,null],[13,"SelfValue","","`self`",98,null],[13,"SelfRegion","","`&'lt self`, `&'lt mut self`",98,null],[13,"SelfExplicit","","`self: TYPE`",98,null],[4,"PathListItem_","","",null,null],[13,"PathListIdent","","",99,null],[12,"name","syntex_syntax::ast::PathListItem_","",99,null],[12,"rename","","renamed in list, eg `use foo::{bar as baz};`",99,null],[12,"id","","",99,null],[13,"PathListMod","syntex_syntax::ast","",99,null],[12,"rename","syntex_syntax::ast::PathListItem_","renamed in list, eg `use foo::{self as baz};`",99,null],[12,"id","","",99,null],[4,"ViewPath_","syntex_syntax::ast","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",100,null],[13,"ViewPathGlob","","`foo::bar::*`",100,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",100,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing.",null,null],[13,"Outer","","",101,null],[13,"Inner","","",101,null],[4,"Visibility","","",null,null],[13,"Public","","",102,null],[13,"Inherited","","",102,null],[4,"StructFieldKind","","",null,null],[13,"NamedField","","",103,null],[13,"UnnamedField","","Element of a tuple-like struct",103,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","",104,null],[13,"Tuple","","",104,null],[13,"Unit","","",104,null],[4,"Item_","","",null,null],[13,"ItemExternCrate","","An`extern crate` item, with optional original crate name,",105,null],[13,"ItemUse","","A `use` or `pub use` item",105,null],[13,"ItemStatic","","A `static` item",105,null],[13,"ItemConst","","A `const` item",105,null],[13,"ItemFn","","A function declaration",105,null],[13,"ItemMod","","A module",105,null],[13,"ItemForeignMod","","An external module",105,null],[13,"ItemTy","","A type alias, e.g. `type Foo = Bar<u8>`",105,null],[13,"ItemEnum","","An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`",105,null],[13,"ItemStruct","","A struct definition, e.g. `struct Foo<A> {x: A}`",105,null],[13,"ItemTrait","","Represents a Trait Declaration",105,null],[13,"ItemDefaultImpl","","",105,null],[13,"ItemImpl","","An implementation, eg `impl<A> Trait for Foo { .. }`",105,null],[13,"ItemMac","","A macro invocation (which includes macro definition)",105,null],[4,"ForeignItem_","","An item within an `extern` block",null,null],[13,"ForeignItemFn","","A foreign function",106,null],[13,"ForeignItemStatic","","A foreign static item (`static ext: u8`), with optional mutability\n(the boolean is true when mutable)",106,null],[6,"Mrk","","A mark represents a unique id associated with a macro expansion",null,null],[6,"CrateNum","","",null,null],[6,"NodeId","","",null,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate,\nused to drive conditional compilation",null,null],[6,"MetaItem","","",null,null],[6,"BinOp","","",null,null],[6,"Stmt","","A statement",null,null],[6,"Decl","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[6,"Attribute","","Meta-data associated with an item",null,null],[6,"StructField","","",null,null],[17,"EMPTY_CTXT","","",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST\nnode value. Then later, in the renumber pass, we renumber them to have\nsmall, positive ids.",null,null],[8,"NodeIdAssigner","","",null,null],[10,"next_node_id","","",107,{"inputs":[{"name":"nodeidassigner"}],"output":{"name":"nodeid"}}],[10,"peek_node_id","","",107,{"inputs":[{"name":"nodeidassigner"}],"output":{"name":"nodeid"}}],[8,"IntSign","","",null,null],[10,"sign","","",108,{"inputs":[{"name":"intsign"}],"output":{"name":"sign"}}],[11,"hash","","",109,null],[11,"cmp","","",109,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"eq","","",109,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"decode","","",110,{"inputs":[{"name":"syntaxcontext"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,{"inputs":[{"name":"syntaxcontext"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"syntaxcontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"syntaxcontext"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"syntaxcontext"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[11,"clone","","",17,{"inputs":[{"name":"ident"}],"output":{"name":"ident"}}],[11,"as_str","","",109,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"fmt","","",109,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",109,{"inputs":[{"name":"name"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"name"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[{"name":"ident"},{"name":"name"},{"name":"syntaxcontext"}],"output":{"name":"ident"}}],[11,"with_empty_ctxt","","",17,{"inputs":[{"name":"ident"},{"name":"name"}],"output":{"name":"ident"}}],[11,"eq","","",17,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",17,{"inputs":[{"name":"ident"},{"name":"h"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"ident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"ident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"ident"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"ident"},{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"lifetime"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"lifetime"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"lifetime"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"lifetime"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fmt","","",18,{"inputs":[{"name":"lifetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"lifetimedef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"lifetimedef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"lifetimedef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"lifetimedef"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"lifetimedef"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"hash","","",20,null],[11,"decode","","",20,{"inputs":[{"name":"path"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"path"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"fmt","","",20,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"pathsegment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"pathsegment"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"pathsegment"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"pathsegment"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"pathsegment"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[11,"fmt","","",63,{"inputs":[{"name":"pathparameters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"pathparameters"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,{"inputs":[{"name":"pathparameters"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"pathparameters"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"pathparameters"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"none","","",63,{"inputs":[{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"is_empty","","",63,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"has_lifetimes","","",63,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"has_types","","",63,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",63,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"lifetimes","","",63,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"bindings","","",63,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"fmt","","",22,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fmt","","",23,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fmt","","",64,{"inputs":[{"name":"typarambound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"typarambound"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,{"inputs":[{"name":"typarambound"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"typarambound"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"typarambound"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fmt","","",65,{"inputs":[{"name":"traitboundmodifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"traitboundmodifier"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,{"inputs":[{"name":"traitboundmodifier"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"traitboundmodifier"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"traitboundmodifier"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[11,"fmt","","",24,{"inputs":[{"name":"typaram"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"typaram"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"typaram"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"typaram"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"typaram"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fmt","","",25,{"inputs":[{"name":"generics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"decode","","",25,{"inputs":[{"name":"generics"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"generics"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"generics"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"generics"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"generics"}],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",25,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",25,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",25,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"whereclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"decode","","",26,{"inputs":[{"name":"whereclause"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"whereclause"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"whereclause"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"whereclause"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fmt","","",66,{"inputs":[{"name":"wherepredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"wherepredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,{"inputs":[{"name":"wherepredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"wherepredicate"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"wherepredicate"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",27,{"inputs":[{"name":"whereboundpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"decode","","",27,{"inputs":[{"name":"whereboundpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"whereboundpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"whereboundpredicate"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"whereboundpredicate"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"whereboundpredicate"}],"output":{"name":"whereboundpredicate"}}],[11,"fmt","","",28,{"inputs":[{"name":"whereregionpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"decode","","",28,{"inputs":[{"name":"whereregionpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,{"inputs":[{"name":"whereregionpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"whereregionpredicate"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"whereregionpredicate"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"whereregionpredicate"}],"output":{"name":"whereregionpredicate"}}],[11,"fmt","","",29,{"inputs":[{"name":"whereeqpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"decode","","",29,{"inputs":[{"name":"whereeqpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,{"inputs":[{"name":"whereeqpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"whereeqpredicate"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"whereeqpredicate"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"whereeqpredicate"}],"output":{"name":"whereeqpredicate"}}],[11,"fmt","","",30,{"inputs":[{"name":"crate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"decode","","",30,{"inputs":[{"name":"crate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"crate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"crate"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"crate"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"crate"}],"output":{"name":"crate"}}],[11,"fmt","","",67,{"inputs":[{"name":"metaitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"metaitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,{"inputs":[{"name":"metaitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"metaitem_"}],"output":{"name":"metaitem_"}}],[11,"eq","","",67,{"inputs":[{"name":"metaitem_"},{"name":"metaitem_"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"decode","","",31,{"inputs":[{"name":"block"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"block"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"hash","","",32,null],[11,"decode","","",32,{"inputs":[{"name":"pat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",32,{"inputs":[{"name":"pat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"pat"}],"output":{"name":"pat"}}],[11,"fmt","","",32,{"inputs":[{"name":"pat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"fieldpat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"decode","","",33,{"inputs":[{"name":"fieldpat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,{"inputs":[{"name":"fieldpat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"fieldpat"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"fieldpat"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[11,"fmt","","",68,{"inputs":[{"name":"bindingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"bindingmode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,{"inputs":[{"name":"bindingmode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"bindingmode"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"bindingmode"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"bindingmode"}],"output":{"name":"bindingmode"}}],[11,"fmt","","",69,{"inputs":[{"name":"pat_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"pat_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,{"inputs":[{"name":"pat_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"pat_"},{"name":"pat_"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"pat_"},{"name":"pat_"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"pat_"}],"output":{"name":"pat_"}}],[11,"fmt","","",70,{"inputs":[{"name":"mutability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"mutability"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,{"inputs":[{"name":"mutability"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"mutability"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"mutability"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"mutability"}],"output":{"name":"mutability"}}],[11,"fmt","","",71,{"inputs":[{"name":"binop_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"binop_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,{"inputs":[{"name":"binop_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"binop_"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"binop_"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"binop_"}],"output":{"name":"binop_"}}],[11,"fmt","","",72,{"inputs":[{"name":"unop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"unop"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,{"inputs":[{"name":"unop"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"unop"}],"output":{"name":"unop"}}],[11,"fmt","","",111,{"inputs":[{"name":"stmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"stmt_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,{"inputs":[{"name":"stmt_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"stmt_"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"stmt_"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"stmt_"}],"output":{"name":"stmt_"}}],[11,"fmt","","",74,{"inputs":[{"name":"macstmtstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"macstmtstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,{"inputs":[{"name":"macstmtstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"macstmtstyle"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"macstmtstyle"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"macstmtstyle"}],"output":{"name":"macstmtstyle"}}],[11,"fmt","","",34,{"inputs":[{"name":"local"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"decode","","",34,{"inputs":[{"name":"local"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"local"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"local"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"local"},{"name":"local"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"local"}],"output":{"name":"local"}}],[11,"fmt","","",75,{"inputs":[{"name":"decl_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"decl_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,{"inputs":[{"name":"decl_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"decl_"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"decl_"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"decl_"}],"output":{"name":"decl_"}}],[11,"fmt","","",35,{"inputs":[{"name":"arm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"decode","","",35,{"inputs":[{"name":"arm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"arm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"arm"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"arm"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"arm"}],"output":{"name":"arm"}}],[11,"fmt","","",36,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"decode","","",36,{"inputs":[{"name":"field"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"field"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"fmt","","",76,{"inputs":[{"name":"blockcheckmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"blockcheckmode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,{"inputs":[{"name":"blockcheckmode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"blockcheckmode"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"blockcheckmode"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"blockcheckmode"}],"output":{"name":"blockcheckmode"}}],[11,"fmt","","",77,{"inputs":[{"name":"unsafesource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"unsafesource"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,{"inputs":[{"name":"unsafesource"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"unsafesource"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"unsafesource"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"unsafesource"}],"output":{"name":"unsafesource"}}],[11,"hash","","",37,null],[11,"decode","","",37,{"inputs":[{"name":"expr"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"expr"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"fmt","","",37,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"expr_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"expr_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,{"inputs":[{"name":"expr_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"expr_"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"expr_"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"expr_"}],"output":{"name":"expr_"}}],[11,"fmt","","",38,{"inputs":[{"name":"qself"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"qself"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"qself"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"qself"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"qself"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"qself"}],"output":{"name":"qself"}}],[11,"fmt","","",79,{"inputs":[{"name":"captureclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"captureclause"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,{"inputs":[{"name":"captureclause"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"captureclause"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"captureclause"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"captureclause"}],"output":{"name":"captureclause"}}],[11,"fmt","","",39,{"inputs":[{"name":"delimited"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"delimited"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"delimited"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"delimited"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"delimited"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"delimited"}],"output":{"name":"delimited"}}],[11,"open_token","","Returns the opening delimiter as a token.",39,{"inputs":[{"name":"delimited"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",39,{"inputs":[{"name":"delimited"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",39,{"inputs":[{"name":"delimited"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",39,{"inputs":[{"name":"delimited"}],"output":{"name":"tokentree"}}],[11,"fmt","","",40,{"inputs":[{"name":"sequencerepetition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"sequencerepetition"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"sequencerepetition"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"sequencerepetition"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"sequencerepetition"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"sequencerepetition"}],"output":{"name":"sequencerepetition"}}],[11,"fmt","","",80,{"inputs":[{"name":"kleeneop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"kleeneop"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,{"inputs":[{"name":"kleeneop"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"kleeneop"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"kleeneop"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"kleeneop"}],"output":{"name":"kleeneop"}}],[11,"fmt","","",81,{"inputs":[{"name":"tokentree"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"tokentree"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,{"inputs":[{"name":"tokentree"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"len","","",81,{"inputs":[{"name":"tokentree"}],"output":{"name":"usize"}}],[11,"get_tt","","",81,{"inputs":[{"name":"tokentree"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"get_span","","Returns the `Span` corresponding to this token tree.",81,{"inputs":[{"name":"tokentree"}],"output":{"name":"span"}}],[11,"parse","","Use this token tree as a matcher to parse given tts.",81,null],[11,"fmt","","",41,{"inputs":[{"name":"mac_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"mac_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"mac_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"mac_"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"mac_"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"mac_"}],"output":{"name":"mac_"}}],[11,"fmt","","",82,{"inputs":[{"name":"strstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"strstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,{"inputs":[{"name":"strstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"strstyle"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"strstyle"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"strstyle"}],"output":{"name":"strstyle"}}],[11,"fmt","","",83,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"new","","",83,{"inputs":[{"name":"sign"},{"name":"t"}],"output":{"name":"sign"}}],[11,"fmt","","",84,{"inputs":[{"name":"litinttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"litinttype"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,{"inputs":[{"name":"litinttype"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"litinttype"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"litinttype"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"litinttype"}],"output":{"name":"litinttype"}}],[11,"fmt","","",85,{"inputs":[{"name":"lit_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"lit_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,{"inputs":[{"name":"lit_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"lit_"},{"name":"lit_"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"lit_"},{"name":"lit_"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"lit_"}],"output":{"name":"lit_"}}],[11,"fmt","","",42,{"inputs":[{"name":"mutty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"mutty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"mutty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"mutty"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"mutty"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fmt","","",43,{"inputs":[{"name":"methodsig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"methodsig"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"methodsig"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"methodsig"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"methodsig"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fmt","","",44,{"inputs":[{"name":"traititem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"traititem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"traititem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"traititem"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"traititem"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"traititem"}],"output":{"name":"traititem"}}],[11,"fmt","","",86,{"inputs":[{"name":"traititem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"traititem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,{"inputs":[{"name":"traititem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"traititem_"},{"name":"traititem_"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"traititem_"},{"name":"traititem_"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"traititem_"}],"output":{"name":"traititem_"}}],[11,"fmt","","",45,{"inputs":[{"name":"implitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"implitem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"implitem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"implitem"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"implitem"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"implitem"}],"output":{"name":"implitem"}}],[11,"fmt","","",87,{"inputs":[{"name":"implitemkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"implitemkind"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,{"inputs":[{"name":"implitemkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"implitemkind"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"implitemkind"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"implitemkind"}],"output":{"name":"implitemkind"}}],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"intty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,{"inputs":[{"name":"intty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"intty"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"intty"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"intty"}],"output":{"name":"intty"}}],[11,"fmt","","",88,{"inputs":[{"name":"intty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"intty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bit_width","","",88,{"inputs":[{"name":"intty"}],"output":{"name":"option"}}],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"uintty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,{"inputs":[{"name":"uintty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"uintty"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"uintty"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"uintty"}],"output":{"name":"uintty"}}],[11,"bit_width","","",89,{"inputs":[{"name":"uintty"}],"output":{"name":"option"}}],[11,"fmt","","",89,{"inputs":[{"name":"uintty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"uintty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"floatty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,{"inputs":[{"name":"floatty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"floatty"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"floatty"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"floatty"}],"output":{"name":"floatty"}}],[11,"fmt","","",90,{"inputs":[{"name":"floatty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"floatty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bit_width","","",90,{"inputs":[{"name":"floatty"}],"output":{"name":"usize"}}],[11,"fmt","","",46,{"inputs":[{"name":"typebinding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"typebinding"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"typebinding"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"typebinding"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"typebinding"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"ty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"ty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[11,"fmt","","",47,{"inputs":[{"name":"ty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"primty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"primty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,{"inputs":[{"name":"primty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"primty"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"primty"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"primty"}],"output":{"name":"primty"}}],[11,"fmt","","",48,{"inputs":[{"name":"barefnty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"barefnty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"barefnty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"barefnty"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"barefnty"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"barefnty"}],"output":{"name":"barefnty"}}],[11,"fmt","","",92,{"inputs":[{"name":"ty_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"ty_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,{"inputs":[{"name":"ty_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"ty_"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"ty_"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"ty_"}],"output":{"name":"ty_"}}],[11,"fmt","","",93,{"inputs":[{"name":"asmdialect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"asmdialect"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,{"inputs":[{"name":"asmdialect"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"asmdialect"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"asmdialect"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"asmdialect"}],"output":{"name":"asmdialect"}}],[11,"fmt","","",49,{"inputs":[{"name":"inlineasm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"inlineasm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"inlineasm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"inlineasm"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"inlineasm"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"inlineasm"}],"output":{"name":"inlineasm"}}],[11,"fmt","","",50,{"inputs":[{"name":"arg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"arg"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"arg"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"arg"}],"output":{"name":"arg"}}],[11,"new_self","","",50,{"inputs":[{"name":"arg"},{"name":"span"},{"name":"mutability"},{"name":"ident"}],"output":{"name":"arg"}}],[11,"fmt","","",51,{"inputs":[{"name":"fndecl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"fndecl"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"fndecl"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"fndecl"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"fndecl"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"fndecl"}],"output":{"name":"fndecl"}}],[11,"fmt","","",94,{"inputs":[{"name":"unsafety"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"unsafety"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,{"inputs":[{"name":"unsafety"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"unsafety"}],"output":{"name":"unsafety"}}],[11,"fmt","","",95,{"inputs":[{"name":"constness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"constness"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,{"inputs":[{"name":"constness"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"constness"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"constness"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"constness"}],"output":{"name":"constness"}}],[11,"fmt","","",94,{"inputs":[{"name":"unsafety"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"implpolarity"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,{"inputs":[{"name":"implpolarity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"implpolarity"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"implpolarity"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"implpolarity"}],"output":{"name":"implpolarity"}}],[11,"fmt","","",96,{"inputs":[{"name":"implpolarity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"functionretty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"functionretty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,{"inputs":[{"name":"functionretty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"functionretty"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"functionretty"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"functionretty"}],"output":{"name":"functionretty"}}],[11,"span","","",97,{"inputs":[{"name":"functionretty"}],"output":{"name":"span"}}],[11,"fmt","","",98,{"inputs":[{"name":"explicitself_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"explicitself_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,{"inputs":[{"name":"explicitself_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"explicitself_"},{"name":"explicitself_"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"explicitself_"},{"name":"explicitself_"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"explicitself_"}],"output":{"name":"explicitself_"}}],[11,"fmt","","",52,{"inputs":[{"name":"mod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"mod"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,{"inputs":[{"name":"mod"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"mod"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"mod"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"mod"}],"output":{"name":"mod"}}],[11,"fmt","","",53,{"inputs":[{"name":"foreignmod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"foreignmod"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"foreignmod"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"foreignmod"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"foreignmod"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fmt","","",54,{"inputs":[{"name":"enumdef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"enumdef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"enumdef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"enumdef"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"enumdef"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"enumdef"}],"output":{"name":"enumdef"}}],[11,"fmt","","",55,{"inputs":[{"name":"variant_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"variant_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,{"inputs":[{"name":"variant_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"variant_"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"variant_"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"variant_"}],"output":{"name":"variant_"}}],[11,"fmt","","",99,{"inputs":[{"name":"pathlistitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"pathlistitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,{"inputs":[{"name":"pathlistitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"pathlistitem_"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"pathlistitem_"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"pathlistitem_"}}],[11,"id","","",99,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"nodeid"}}],[11,"name","","",99,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"option"}}],[11,"rename","","",99,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"option"}}],[11,"fmt","","",100,{"inputs":[{"name":"viewpath_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"viewpath_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,{"inputs":[{"name":"viewpath_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"viewpath_"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"viewpath_"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"viewpath_"}],"output":{"name":"viewpath_"}}],[11,"fmt","","",101,{"inputs":[{"name":"attrstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"attrstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,{"inputs":[{"name":"attrstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"attrstyle"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"attrstyle"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[11,"fmt","","",112,{"inputs":[{"name":"attrid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"attrid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,{"inputs":[{"name":"attrid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"attrid"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"attrid"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"attrid"}],"output":{"name":"attrid"}}],[11,"fmt","","",56,{"inputs":[{"name":"attribute_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"attribute_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"attribute_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"attribute_"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"attribute_"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"attribute_"}],"output":{"name":"attribute_"}}],[11,"fmt","","",57,{"inputs":[{"name":"traitref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"traitref"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,{"inputs":[{"name":"traitref"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"traitref"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"traitref"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fmt","","",58,{"inputs":[{"name":"polytraitref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"polytraitref"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,{"inputs":[{"name":"polytraitref"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fmt","","",102,{"inputs":[{"name":"visibility"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"visibility"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,{"inputs":[{"name":"visibility"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"inherit_from","","",102,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fmt","","",59,{"inputs":[{"name":"structfield_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"structfield_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"structfield_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"structfield_"},{"name":"structfield_"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"structfield_"},{"name":"structfield_"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"structfield_"}],"output":{"name":"structfield_"}}],[11,"ident","","",59,{"inputs":[{"name":"structfield_"}],"output":{"name":"option"}}],[11,"fmt","","",103,{"inputs":[{"name":"structfieldkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"structfieldkind"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,{"inputs":[{"name":"structfieldkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"structfieldkind"},{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"structfieldkind"},{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"structfieldkind"}}],[11,"is_unnamed","","",103,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"visibility","","",103,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"visibility"}}],[11,"fmt","","",104,{"inputs":[{"name":"variantdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"variantdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,{"inputs":[{"name":"variantdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"variantdata"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"variantdata"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fields","","",104,null],[11,"id","","",104,{"inputs":[{"name":"variantdata"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",104,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"is_tuple","","",104,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"is_unit","","",104,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"item"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,{"inputs":[{"name":"item"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"fmt","","",105,{"inputs":[{"name":"item_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"item_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,{"inputs":[{"name":"item_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"item_"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"item_"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"item_"}],"output":{"name":"item_"}}],[11,"descriptive_variant","","",105,{"inputs":[{"name":"item_"}],"output":{"name":"str"}}],[11,"fmt","","",61,{"inputs":[{"name":"foreignitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"foreignitem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"foreignitem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"foreignitem"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"foreignitem"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",106,{"inputs":[{"name":"foreignitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"foreignitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,{"inputs":[{"name":"foreignitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"foreignitem_"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"foreignitem_"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"foreignitem_"}],"output":{"name":"foreignitem_"}}],[11,"descriptive_variant","","",106,{"inputs":[{"name":"foreignitem_"}],"output":{"name":"str"}}],[11,"fmt","","",62,{"inputs":[{"name":"macrodef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"macrodef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,{"inputs":[{"name":"macrodef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"macrodef"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"macrodef"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"macrodef"}],"output":{"name":"macrodef"}}],[0,"ast_util","syntex_syntax","",null,null],[3,"IdRange","syntex_syntax::ast_util","",null,null],[12,"min","","",113,null],[12,"max","","",113,null],[3,"IdVisitor","","A visitor that applies its operation to all of the node IDs\nin a visitable thing.",null,null],[12,"operation","","",114,null],[12,"visited_outermost","","",114,null],[3,"IdRangeComputingVisitor","","",null,null],[12,"result","","",115,null],[5,"path_name_i","","",null,null],[5,"stmt_id","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"option"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binop_"}],"output":{"name":"str"}}],[5,"lazy_binop","","",null,{"inputs":[{"name":"binop_"}],"output":{"name":"bool"}}],[5,"is_shift_binop","","",null,{"inputs":[{"name":"binop_"}],"output":{"name":"bool"}}],[5,"is_comparison_binop","","",null,{"inputs":[{"name":"binop_"}],"output":{"name":"bool"}}],[5,"is_by_value_binop","","Returns `true` if the binary operator takes its arguments by value",null,{"inputs":[{"name":"binop_"}],"output":{"name":"bool"}}],[5,"is_by_value_unop","","Returns `true` if the unary operator takes its argument by value",null,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[5,"unop_to_string","","",null,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[5,"is_path","","",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"int_ty_to_string","","Get a string representation of a signed int type, with its value.\nWe want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"",null,{"inputs":[{"name":"intty"},{"name":"option"}],"output":{"name":"string"}}],[5,"int_ty_max","","",null,{"inputs":[{"name":"intty"}],"output":{"name":"u64"}}],[5,"uint_ty_to_string","","Get a string representation of an unsigned int type, with its value.\nWe want to avoid \"42u\" in favor of \"42us\". \"42uint\" is right out.",null,{"inputs":[{"name":"uintty"},{"name":"option"}],"output":{"name":"string"}}],[5,"uint_ty_max","","",null,{"inputs":[{"name":"uintty"}],"output":{"name":"u64"}}],[5,"float_ty_to_string","","",null,{"inputs":[{"name":"floatty"}],"output":{"name":"string"}}],[5,"ident_to_path","","",null,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[5,"path_to_ident","","",null,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[5,"ident_to_pat","","",null,{"inputs":[{"name":"nodeid"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[5,"impl_pretty_name","","Generate a \"pretty\" name for an `impl` from its type and trait.\nThis is designed so that symbols of `impl`'d methods give some\nhint of where they came from, (previously they would all just be\nlisted as `__extensions__::method_name::hash`, with no indication\nof the type).",null,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ident"}}],[5,"struct_field_visibility","","",null,{"inputs":[{"name":"structfield"}],"output":{"name":"visibility"}}],[5,"empty_generics","","",null,{"inputs":[],"output":{"name":"generics"}}],[5,"compute_id_range_for_fn_body","","Computes the id range for a single fn body, ignoring nested items.",null,{"inputs":[{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":{"name":"idrange"}}],[5,"pat_is_ident","","Returns true if the given pattern consists solely of an identifier\nand false otherwise.",null,{"inputs":[{"name":"p"}],"output":{"name":"bool"}}],[5,"path_name_eq","","",null,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[5,"segments_name_eq","","",null,null],[5,"lit_is_str","","Returns true if this literal is a string and false otherwise.",null,{"inputs":[{"name":"lit"}],"output":{"name":"bool"}}],[8,"IdVisitingOperation","","",null,null],[10,"visit_id","","",116,{"inputs":[{"name":"idvisitingoperation"},{"name":"nodeid"}],"output":null}],[11,"fmt","","",113,{"inputs":[{"name":"idrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",113,{"inputs":[{"name":"idrange"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,{"inputs":[{"name":"idrange"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"idrange"}],"output":{"name":"idrange"}}],[11,"max","","",113,{"inputs":[{"name":"idrange"}],"output":{"name":"idrange"}}],[11,"empty","","",113,{"inputs":[{"name":"idrange"}],"output":{"name":"bool"}}],[11,"add","","",113,{"inputs":[{"name":"idrange"},{"name":"nodeid"}],"output":null}],[11,"visit_mod","","",114,{"inputs":[{"name":"idvisitor"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",114,{"inputs":[{"name":"idvisitor"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",114,{"inputs":[{"name":"idvisitor"},{"name":"item"}],"output":null}],[11,"visit_local","","",114,{"inputs":[{"name":"idvisitor"},{"name":"local"}],"output":null}],[11,"visit_block","","",114,{"inputs":[{"name":"idvisitor"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",114,{"inputs":[{"name":"idvisitor"},{"name":"stmt"}],"output":null}],[11,"visit_pat","","",114,{"inputs":[{"name":"idvisitor"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",114,{"inputs":[{"name":"idvisitor"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",114,{"inputs":[{"name":"idvisitor"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",114,{"inputs":[{"name":"idvisitor"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",114,{"inputs":[{"name":"idvisitor"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_struct_field","","",114,{"inputs":[{"name":"idvisitor"},{"name":"structfield"}],"output":null}],[11,"visit_variant_data","","",114,{"inputs":[{"name":"idvisitor"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_trait_item","","",114,{"inputs":[{"name":"idvisitor"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",114,{"inputs":[{"name":"idvisitor"},{"name":"implitem"}],"output":null}],[11,"visit_lifetime","","",114,{"inputs":[{"name":"idvisitor"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",114,{"inputs":[{"name":"idvisitor"},{"name":"lifetimedef"}],"output":null}],[11,"visit_trait_ref","","",114,{"inputs":[{"name":"idvisitor"},{"name":"traitref"}],"output":null}],[11,"new","","",115,{"inputs":[{"name":"idrangecomputingvisitor"}],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",115,{"inputs":[{"name":"idrangecomputingvisitor"}],"output":{"name":"idrange"}}],[11,"visit_id","","",115,{"inputs":[{"name":"idrangecomputingvisitor"},{"name":"nodeid"}],"output":null}],[0,"attr","syntex_syntax","",null,null],[3,"Stability","syntex_syntax::attr","Represents the #[stable], #[unstable] and #[deprecated] attributes.",null,null],[12,"level","","",117,null],[12,"feature","","",117,null],[12,"depr","","",117,null],[3,"Deprecation","","",null,null],[12,"since","","",118,null],[12,"reason","","",118,null],[4,"InlineAttr","","",null,null],[13,"None","","",119,null],[13,"Hint","","",119,null],[13,"Always","","",119,null],[13,"Never","","",119,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",120,null],[12,"reason","syntex_syntax::attr::StabilityLevel","",120,null],[12,"issue","","",120,null],[13,"Stable","syntex_syntax::attr","",120,null],[12,"since","syntex_syntax::attr::StabilityLevel","",120,null],[4,"ReprAttr","syntex_syntax::attr","",null,null],[13,"ReprAny","","",121,null],[13,"ReprInt","","",121,null],[13,"ReprExtern","","",121,null],[13,"ReprPacked","","",121,null],[13,"ReprSimd","","",121,null],[4,"IntType","","",null,null],[13,"SignedInt","","",122,null],[13,"UnsignedInt","","",122,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"internedstring"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"attribute"}}],[5,"contains","","Check if `needle` occurs in `haystack` by a structural\ncomparison. This is slightly subtle, and relies on ignoring the\nspan included in the `==` comparison a plain MetaItem.",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"last_meta_item_value_str_by_name","","",null,null],[5,"sort_meta_items","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,null],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"require_unique_names","","",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"spanhandler"},{"name":"attribute"}],"output":{"name":"vec"}}],[8,"AttrMetaMethods","","",null,null],[11,"check_name","","",123,{"inputs":[{"name":"attrmetamethods"},{"name":"str"}],"output":{"name":"bool"}}],[10,"name","","Retrieve the name of the meta item, e.g. `foo` in `#[foo]`,\n`#[foo=\"bar\"]` and `#[foo(bar)]`",123,{"inputs":[{"name":"attrmetamethods"}],"output":{"name":"internedstring"}}],[10,"value_str","","Gets the string value if self is a MetaNameValue variant\ncontaining a string, otherwise None.",123,{"inputs":[{"name":"attrmetamethods"}],"output":{"name":"option"}}],[10,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",123,{"inputs":[{"name":"attrmetamethods"}],"output":{"name":"option"}}],[10,"span","","",123,{"inputs":[{"name":"attrmetamethods"}],"output":{"name":"span"}}],[8,"AttributeMethods","","",null,null],[10,"meta","","",124,{"inputs":[{"name":"attributemethods"}],"output":{"name":"metaitem"}}],[10,"with_desugared_doc","","",124,{"inputs":[{"name":"attributemethods"},{"name":"f"}],"output":{"name":"t"}}],[11,"check_name","","",125,{"inputs":[{"name":"attribute"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",125,{"inputs":[{"name":"attribute"}],"output":{"name":"internedstring"}}],[11,"value_str","","",125,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"meta_item_list","","",125,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"span","","",125,{"inputs":[{"name":"attribute"}],"output":{"name":"span"}}],[11,"name","","",126,{"inputs":[{"name":"metaitem"}],"output":{"name":"internedstring"}}],[11,"value_str","","",126,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"meta_item_list","","",126,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"span","","",126,{"inputs":[{"name":"metaitem"}],"output":{"name":"span"}}],[11,"meta","","Extract the MetaItem from inside this Attribute.",125,{"inputs":[{"name":"attribute"}],"output":{"name":"metaitem"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",125,{"inputs":[{"name":"attribute"},{"name":"f"}],"output":{"name":"t"}}],[11,"eq","","",119,{"inputs":[{"name":"inlineattr"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"inlineattr"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"inlineattr"}],"output":{"name":"inlineattr"}}],[11,"hash","","",117,null],[11,"eq","","",117,{"inputs":[{"name":"stability"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"stability"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"fmt","","",117,{"inputs":[{"name":"stability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"stability"}],"output":{"name":"stability"}}],[11,"decode","","",117,{"inputs":[{"name":"stability"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",117,{"inputs":[{"name":"stability"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"decode","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",120,{"inputs":[{"name":"stabilitylevel"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"deprecation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"deprecation"}],"output":{"name":"deprecation"}}],[11,"partial_cmp","","",118,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"option"}}],[11,"lt","","",118,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"le","","",118,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"gt","","",118,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ge","","",118,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"decode","","",118,{"inputs":[{"name":"deprecation"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",118,{"inputs":[{"name":"deprecation"},{"name":"__s"}],"output":{"name":"result"}}],[11,"is_unstable","","",120,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"is_stable","","",120,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"reprattr"}],"output":{"name":"reprattr"}}],[11,"decode","","",121,{"inputs":[{"name":"reprattr"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",121,{"inputs":[{"name":"reprattr"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"reprattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"reprattr"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"reprattr"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"is_ffi_safe","","",121,{"inputs":[{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"inttype"}],"output":{"name":"inttype"}}],[11,"decode","","",122,{"inputs":[{"name":"inttype"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",122,{"inputs":[{"name":"inttype"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"inttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"inttype"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"inttype"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"hash","","",122,null],[11,"is_signed","","",122,{"inputs":[{"name":"inttype"}],"output":{"name":"bool"}}],[0,"codemap","syntex_syntax","The CodeMap tracks all the source code used within a single crate, mapping\nfrom integer byte positions to the original source code location. Each bit\nof source parsed during crate parsing (typically files, in-memory strings,\nor various bits of macro expansion) cover a continuous range of bytes in the\nCodeMap and are represented by FileMaps. Byte positions are stored in\n`spans` and used pervasively in the compiler. They are absolute positions\nwithin the CodeMap, which upon request can be converted to line and column\ninformation, source code snippets, etc.",null,null],[3,"BytePos","syntex_syntax::codemap","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them.",null,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset\nis not equivalent to a character offset. The CodeMap will convert BytePos\nvalues to CharPos values as necessary.",null,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",127,null],[12,"hi","","",127,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",127,null],[3,"Spanned","","",null,null],[12,"node","","",128,null],[12,"span","","",128,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",129,null],[12,"line","","The (1-based) line number",129,null],[12,"col","","The (0-based) column offset",129,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",130,null],[12,"line","","",130,null],[12,"col","","",130,null],[12,"file","","",130,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",131,null],[12,"line","","",131,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",132,null],[12,"pos","","",132,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",133,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated\nfeatures internally without forcing the whole crate to opt-in\nto them.",133,null],[12,"span","","The span of the macro definition itself. The macro may not\nhave a sensible definition span (e.g. something defined\ncompletely inside libsyntax) in which case this is None.",133,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g.\n`let x = foo!();` or `if let Some(y) = x {}`",134,null],[12,"callee","","Information about the expansion.",134,null],[3,"ExpnId","","",null,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",135,null],[12,"start_col","","Column in line where span begins, starting from 0.",135,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",135,null],[3,"FileLines","","",null,null],[12,"file","","",136,null],[12,"lines","","",136,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",137,null],[12,"bytes","","The number of bytes, >=2",137,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't\noriginate from files has names between angle brackets by convention,\ne.g. `<anon>`",138,null],[12,"src","","The complete source code",138,null],[12,"start_pos","","The start position of this source in the CodeMap",138,null],[12,"end_pos","","The end position of this source in the CodeMap",138,null],[12,"lines","","Locations of lines beginnings in the source code",138,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",138,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",139,null],[3,"DistinctSources","","",null,null],[3,"MalformedCodemapPositions","","",null,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] <item>",140,null],[13,"MacroBang","","e.g. `format!()`",140,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",141,null],[13,"DistinctSources","","",141,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",142,null],[13,"DistinctSources","","",142,null],[13,"MalformedForCodemap","","",142,null],[13,"SourceNotAvailable","","",142,null],[12,"filename","syntex_syntax::codemap::SpanSnippetError","",142,null],[5,"spanned","syntex_syntax::codemap","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[5,"mk_sp","","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[5,"original_sp","","Return the span itself if it doesn't come from a macro expansion,\notherwise return the call site span up to the `enclosing_sp` by\nfollowing the `expn_info` chain.",null,{"inputs":[{"name":"codemap"},{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[6,"FileName","","",null,null],[6,"FileLinesResult","","",null,null],[7,"SPAN_DEBUG","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"COMMAND_LINE_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"COMMAND_LINE_EXPN","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",143,{"inputs":[{"name":"pos"},{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",143,{"inputs":[{"name":"pos"}],"output":{"name":"usize"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",144,{"inputs":[{"name":"fileloader"},{"name":"path"}],"output":{"name":"bool"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",144,{"inputs":[{"name":"fileloader"},{"name":"path"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"bytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",145,null],[11,"eq","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"fmt","","",146,{"inputs":[{"name":"charpos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"option"}}],[11,"lt","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",146,null],[11,"eq","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"from_usize","","",145,{"inputs":[{"name":"bytepos"},{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",145,{"inputs":[{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"add","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",145,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",145,{"inputs":[{"name":"bytepos"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",145,{"inputs":[{"name":"bytepos"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",146,{"inputs":[{"name":"charpos"},{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",146,{"inputs":[{"name":"charpos"}],"output":{"name":"usize"}}],[11,"add","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",146,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"hash","","",127,null],[11,"clone","","",127,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",127,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",127,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"spanned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"decode","","",128,{"inputs":[{"name":"spanned"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",128,{"inputs":[{"name":"spanned"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"spanned"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"spanned"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"eq","","",127,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"encode","","",127,{"inputs":[{"name":"span"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",127,{"inputs":[{"name":"span"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"span"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"loc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"locwithopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"filemapandline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"filemapandbytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"expnformat"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"expnformat"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"expnformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"clone","","",140,{"inputs":[{"name":"expnformat"}],"output":{"name":"expnformat"}}],[11,"fmt","","",133,{"inputs":[{"name":"nameandspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"clone","","",133,{"inputs":[{"name":"nameandspan"}],"output":{"name":"nameandspan"}}],[11,"name","","",133,{"inputs":[{"name":"nameandspan"}],"output":{"name":"name"}}],[11,"fmt","","",134,{"inputs":[{"name":"expninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"decode","","",147,{"inputs":[{"name":"expnid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",147,{"inputs":[{"name":"expnid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"fmt","","",147,{"inputs":[{"name":"expnid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"expnid"}],"output":{"name":"expnid"}}],[11,"eq","","",147,{"inputs":[{"name":"expnid"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"expnid"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"from_u32","","",147,{"inputs":[{"name":"expnid"},{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",147,{"inputs":[{"name":"expnid"}],"output":{"name":"u32"}}],[11,"eq","","",135,{"inputs":[{"name":"lineinfo"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"lineinfo"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"lineinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"lineinfo"}],"output":{"name":"lineinfo"}}],[11,"eq","","",137,{"inputs":[{"name":"multibytechar"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"multibytechar"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"decode","","",137,{"inputs":[{"name":"multibytechar"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",137,{"inputs":[{"name":"multibytechar"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"multibytechar"}],"output":{"name":"multibytechar"}}],[11,"encode","","",138,{"inputs":[{"name":"filemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",138,{"inputs":[{"name":"filemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"filemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",138,{"inputs":[{"name":"filemap"},{"name":"bytepos"}],"output":null}],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",138,{"inputs":[{"name":"filemap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"record_multibyte_char","","",138,{"inputs":[{"name":"filemap"},{"name":"bytepos"},{"name":"usize"}],"output":null}],[11,"is_real_file","","",138,{"inputs":[{"name":"filemap"}],"output":{"name":"bool"}}],[11,"is_imported","","",138,{"inputs":[{"name":"filemap"}],"output":{"name":"bool"}}],[11,"file_exists","","",148,{"inputs":[{"name":"realfileloader"},{"name":"path"}],"output":{"name":"bool"}}],[11,"read_file","","",148,{"inputs":[{"name":"realfileloader"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",139,{"inputs":[{"name":"codemap"}],"output":{"name":"codemap"}}],[11,"with_file_loader","","",139,{"inputs":[{"name":"codemap"},{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",139,{"inputs":[{"name":"codemap"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",139,{"inputs":[{"name":"codemap"},{"name":"path"}],"output":{"name":"result"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't\nintend to set the line information yourself, you should use new_filemap_and_lines.",139,{"inputs":[{"name":"codemap"},{"name":"filename"},{"name":"string"}],"output":{"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",139,{"inputs":[{"name":"codemap"},{"name":"str"},{"name":"str"}],"output":{"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an \"imported filemap\" is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",139,{"inputs":[{"name":"codemap"},{"name":"filename"},{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[11,"mk_substr_filename","","",139,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",139,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",139,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"span_to_string","","",139,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",139,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"filename"}}],[11,"span_to_lines","","",139,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_snippet","","",139,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"result"}}],[11,"get_filemap","","",139,{"inputs":[{"name":"codemap"},{"name":"str"}],"output":{"name":"rc"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",139,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",139,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"record_expansion","","",139,{"inputs":[{"name":"codemap"},{"name":"expninfo"}],"output":{"name":"expnid"}}],[11,"with_expn_info","","",139,{"inputs":[{"name":"codemap"},{"name":"expnid"},{"name":"f"}],"output":{"name":"t"}}],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",139,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"bool"}}],[11,"count_lines","","",139,{"inputs":[{"name":"codemap"}],"output":{"name":"usize"}}],[11,"fmt","","",141,{"inputs":[{"name":"spanlineserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"spanlineserror"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"spanlineserror"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"spanlineserror"}],"output":{"name":"spanlineserror"}}],[11,"fmt","","",142,{"inputs":[{"name":"spansnippeterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"spansnippeterror"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"spansnippeterror"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"spansnippeterror"}],"output":{"name":"spansnippeterror"}}],[11,"fmt","","",149,{"inputs":[{"name":"distinctsources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"distinctsources"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"distinctsources"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"distinctsources"}],"output":{"name":"distinctsources"}}],[11,"fmt","","",150,{"inputs":[{"name":"malformedcodemappositions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"malformedcodemappositions"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"malformedcodemappositions"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"malformedcodemappositions"}],"output":{"name":"malformedcodemappositions"}}],[0,"config","syntex_syntax","",null,null],[5,"strip_unconfigured_items","syntex_syntax::config","",null,{"inputs":[{"name":"spanhandler"},{"name":"crate"},{"name":"vec"}],"output":{"name":"crate"}}],[5,"strip_items","","",null,{"inputs":[{"name":"crate"},{"name":"f"}],"output":{"name":"crate"}}],[0,"diagnostic","syntex_syntax","",null,null],[3,"FatalError","syntex_syntax::diagnostic","Used as a return value to signify a fatal error occurred. (It is also\nused as the argument to panic at the moment, but that will eventually\nnot be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc.",null,null],[3,"SpanHandler","","A span-handler is like a handler but also\naccepts span information for source-location\nreporting.",null,null],[12,"handler","","",151,null],[12,"cm","","",151,null],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting.",null,null],[12,"can_emit_warnings","","",152,null],[3,"EmitterWriter","","",null,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",153,null],[13,"EndSpan","","Similar to a FullSpan, but the cited position is the end of\nthe span, instead of the start. Used, at least, for telling\ncompiletest/runtest to look at the last line of the span\n(since `end_highlight_lines` displays an arrow to the end\nof the span).",153,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary\nof hypothetical source code, where the `String` is spliced\ninto the lines in place of the code covered by the span.",153,null],[13,"FileLine","","A FileLine renders with just a line for the message prefixed\nby file:linenum.",153,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",154,null],[13,"Always","","",154,null],[13,"Never","","",154,null],[4,"Level","","",null,null],[13,"Bug","","",155,null],[13,"Fatal","","",155,null],[13,"Error","","",155,null],[13,"Warning","","",155,null],[13,"Note","","",155,null],[13,"Help","","",155,null],[5,"expect","","",null,{"inputs":[{"name":"spanhandler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[8,"Emitter","","",null,null],[10,"emit","","",156,{"inputs":[{"name":"emitter"},{"name":"option"},{"name":"str"},{"name":"option"},{"name":"level"}],"output":null}],[10,"custom_emit","","",156,{"inputs":[{"name":"emitter"},{"name":"codemap"},{"name":"renderspan"},{"name":"str"},{"name":"level"}],"output":null}],[11,"clone","","",153,{"inputs":[{"name":"renderspan"}],"output":{"name":"renderspan"}}],[11,"clone","","",154,{"inputs":[{"name":"colorconfig"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",157,{"inputs":[{"name":"fatalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"fatalerror"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",157,{"inputs":[{"name":"fatalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",157,{"inputs":[{"name":"fatalerror"}],"output":{"name":"str"}}],[11,"fmt","","",158,{"inputs":[{"name":"explicitbug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"explicitbug"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",158,{"inputs":[{"name":"explicitbug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",158,{"inputs":[{"name":"explicitbug"}],"output":{"name":"str"}}],[11,"new","","",151,{"inputs":[{"name":"spanhandler"},{"name":"handler"},{"name":"codemap"}],"output":{"name":"spanhandler"}}],[11,"span_fatal","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err_with_code","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_warn","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_note","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_end_note","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_help","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":null}],[11,"fileline_note","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"fileline_help","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_bug","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_bug_no_panic","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",151,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":null}],[11,"handler","","",151,{"inputs":[{"name":"spanhandler"}],"output":{"name":"handler"}}],[11,"new","","",152,{"inputs":[{"name":"handler"},{"name":"colorconfig"},{"name":"option"},{"name":"bool"}],"output":{"name":"handler"}}],[11,"with_emitter","","",152,{"inputs":[{"name":"handler"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"fatal","","",152,{"inputs":[{"name":"handler"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",152,{"inputs":[{"name":"handler"},{"name":"str"}],"output":null}],[11,"bump_err_count","","",152,{"inputs":[{"name":"handler"}],"output":null}],[11,"err_count","","",152,{"inputs":[{"name":"handler"}],"output":{"name":"usize"}}],[11,"has_errors","","",152,{"inputs":[{"name":"handler"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",152,{"inputs":[{"name":"handler"}],"output":null}],[11,"warn","","",152,{"inputs":[{"name":"handler"},{"name":"str"}],"output":null}],[11,"note","","",152,{"inputs":[{"name":"handler"},{"name":"str"}],"output":null}],[11,"help","","",152,{"inputs":[{"name":"handler"},{"name":"str"}],"output":null}],[11,"bug","","",152,{"inputs":[{"name":"handler"},{"name":"str"}],"output":null}],[11,"unimpl","","",152,{"inputs":[{"name":"handler"},{"name":"str"}],"output":null}],[11,"emit","","",152,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"str"},{"name":"level"}],"output":null}],[11,"emit_with_code","","",152,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"str"},{"name":"str"},{"name":"level"}],"output":null}],[11,"custom_emit","","",152,{"inputs":[{"name":"handler"},{"name":"codemap"},{"name":"renderspan"},{"name":"str"},{"name":"level"}],"output":null}],[11,"fmt","","",155,{"inputs":[{"name":"level"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"level"}],"output":{"name":"level"}}],[11,"eq","","",155,{"inputs":[{"name":"level"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"level"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"level"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stderr","","",159,{"inputs":[{"name":"emitterwriter"},{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",159,{"inputs":[{"name":"emitterwriter"},{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"emit","","",159,{"inputs":[{"name":"emitterwriter"},{"name":"option"},{"name":"str"},{"name":"option"},{"name":"level"}],"output":null}],[11,"custom_emit","","",159,{"inputs":[{"name":"emitterwriter"},{"name":"codemap"},{"name":"renderspan"},{"name":"str"},{"name":"level"}],"output":null}],[0,"entry","syntex_syntax","",null,null],[4,"EntryPointType","syntex_syntax::entry","",null,null],[13,"None","","",160,null],[13,"MainNamed","","",160,null],[13,"MainAttr","","",160,null],[13,"Start","","",160,null],[13,"OtherMain","","",160,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntex_syntax","Feature gating",null,null],[3,"GatedCfg","syntex_syntax::feature_gate","",null,null],[3,"Features","","A set of features to be used by later passes.",null,null],[12,"unboxed_closures","","",161,null],[12,"rustc_diagnostic_macros","","",161,null],[12,"visible_private_types","","",161,null],[12,"allow_quote","","",161,null],[12,"allow_asm","","",161,null],[12,"allow_log_syntax","","",161,null],[12,"allow_concat_idents","","",161,null],[12,"allow_trace_macros","","",161,null],[12,"allow_internal_unstable","","",161,null],[12,"allow_custom_derive","","",161,null],[12,"allow_placement_in","","",161,null],[12,"allow_box","","",161,null],[12,"allow_pushpop_unsafe","","",161,null],[12,"simd_ffi","","",161,null],[12,"unmarked_api","","",161,null],[12,"negate_unsigned","","",161,null],[12,"declared_stable_lang_features","","spans of #![feature] attrs for stable language features. for error reporting",161,null],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",161,null],[12,"const_fn","","",161,null],[12,"static_recursion","","",161,null],[12,"default_type_parameter_fallback","","",161,null],[12,"type_macros","","",161,null],[12,"cfg_target_feature","","",161,null],[12,"cfg_target_vendor","","",161,null],[12,"augmented_assignments","","",161,null],[12,"braced_empty_structs","","",161,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed\nby the compiler before the unused_attribute check",162,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler\nbefore the unused_attribute check. These attributes\nwill be ignored by the unused_attribute lint",162,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",162,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate and reason",163,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",163,null],[4,"GateIssue","","",null,null],[13,"Language","","",164,null],[13,"Library","","",164,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",165,null],[13,"Allow","","Allow features to me activated, as on nightly.",165,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this is always required for building Rust itself.",165,null],[5,"check_for_box_syntax","","",null,{"inputs":[{"name":"option"},{"name":"spanhandler"},{"name":"span"}],"output":null}],[5,"check_for_placement_in","","",null,{"inputs":[{"name":"option"},{"name":"spanhandler"},{"name":"span"}],"output":null}],[5,"check_for_pushpop_syntax","","",null,{"inputs":[{"name":"option"},{"name":"spanhandler"},{"name":"span"}],"output":null}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"spanhandler"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"check_crate_macros","","",null,{"inputs":[{"name":"codemap"},{"name":"spanhandler"},{"name":"crate"}],"output":{"name":"features"}}],[5,"check_crate","","",null,null],[17,"KNOWN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[11,"eq","","",166,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"fmt","","",166,{"inputs":[{"name":"gatedcfg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",166,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",166,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"option"}}],[11,"gate","","",166,{"inputs":[{"name":"gatedcfg"},{"name":"metaitem"}],"output":{"name":"option"}}],[11,"check_and_emit","","",166,{"inputs":[{"name":"gatedcfg"},{"name":"spanhandler"},{"name":"features"}],"output":null}],[11,"fmt","","",162,{"inputs":[{"name":"attributetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"attributetype"}],"output":{"name":"attributetype"}}],[11,"eq","","",162,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"attributegate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"attributegate"}],"output":{"name":"attributegate"}}],[11,"eq","","",163,{"inputs":[{"name":"attributegate"},{"name":"attributegate"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"attributegate"},{"name":"attributegate"}],"output":{"name":"bool"}}],[11,"new","","",161,{"inputs":[{"name":"features"}],"output":{"name":"features"}}],[11,"clone","","",165,{"inputs":[{"name":"unstablefeatures"}],"output":{"name":"unstablefeatures"}}],[0,"fold","syntex_syntax","A Folder represents an AST->AST fold; it accepts an AST piece,\nand returns a piece of the same type. So, for instance, macro\nexpansion is a Folder that walks over an AST and produces another\nAST.",null,null],[5,"noop_fold_meta_items","syntex_syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_explicit_self_underscore","","",null,{"inputs":[{"name":"explicitself_"},{"name":"t"}],"output":{"name":"explicitself_"}}],[5,"noop_fold_explicit_self","","",null,{"inputs":[{"name":"explicitself"},{"name":"t"}],"output":{"name":"explicitself"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,null],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"ownedslice"},{"name":"t"}],"output":{"name":"ownedslice"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_underscore","","",null,{"inputs":[{"name":"item_"},{"name":"t"}],"output":{"name":"item_"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[8,"MoveMap","","",null,null],[10,"move_map","","",167,{"inputs":[{"name":"movemap"},{"name":"f"}],"output":{"name":"self"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",168,{"inputs":[{"name":"folder"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_meta_items","","",168,{"inputs":[{"name":"folder"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_meta_item","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_view_path","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_item","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_item","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_simple","","",168,{"inputs":[{"name":"folder"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_struct_field","","",168,{"inputs":[{"name":"folder"},{"name":"structfield"}],"output":{"name":"structfield"}}],[11,"fold_item_underscore","","",168,{"inputs":[{"name":"folder"},{"name":"item_"}],"output":{"name":"item_"}}],[11,"fold_trait_item","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_fn_decl","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_block","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_stmt","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_arm","","",168,{"inputs":[{"name":"folder"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_pat","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_decl","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_expr","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty_binding","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mod","","",168,{"inputs":[{"name":"folder"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_foreign_mod","","",168,{"inputs":[{"name":"folder"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_variant","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ident","","",168,{"inputs":[{"name":"folder"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_usize","","",168,{"inputs":[{"name":"folder"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"fold_path","","",168,{"inputs":[{"name":"folder"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_parameters","","",168,{"inputs":[{"name":"folder"},{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"fold_angle_bracketed_parameter_data","","",168,{"inputs":[{"name":"folder"},{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fold_parenthesized_parameter_data","","",168,{"inputs":[{"name":"folder"},{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fold_local","","",168,{"inputs":[{"name":"folder"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",168,{"inputs":[{"name":"folder"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_explicit_self","","",168,{"inputs":[{"name":"folder"},{"name":"explicitself"}],"output":{"name":"explicitself"}}],[11,"fold_explicit_self_underscore","","",168,{"inputs":[{"name":"folder"},{"name":"explicitself_"}],"output":{"name":"explicitself_"}}],[11,"fold_lifetime","","",168,{"inputs":[{"name":"folder"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",168,{"inputs":[{"name":"folder"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_attribute","","",168,{"inputs":[{"name":"folder"},{"name":"attribute"}],"output":{"name":"option"}}],[11,"fold_arg","","",168,{"inputs":[{"name":"folder"},{"name":"arg"}],"output":{"name":"arg"}}],[11,"fold_generics","","",168,{"inputs":[{"name":"folder"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_trait_ref","","",168,{"inputs":[{"name":"folder"},{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fold_poly_trait_ref","","",168,{"inputs":[{"name":"folder"},{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fold_variant_data","","",168,{"inputs":[{"name":"folder"},{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fold_lifetimes","","",168,{"inputs":[{"name":"folder"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_lifetime_defs","","",168,{"inputs":[{"name":"folder"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty_param","","",168,{"inputs":[{"name":"folder"},{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fold_ty_params","","",168,{"inputs":[{"name":"folder"},{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"fold_tt","","",168,{"inputs":[{"name":"folder"},{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"fold_tts","","",168,null],[11,"fold_token","","",168,{"inputs":[{"name":"folder"},{"name":"token"}],"output":{"name":"token"}}],[11,"fold_interpolated","","",168,{"inputs":[{"name":"folder"},{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fold_opt_lifetime","","",168,{"inputs":[{"name":"folder"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_opt_bounds","","",168,{"inputs":[{"name":"folder"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_bounds","","",168,{"inputs":[{"name":"folder"},{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"fold_ty_param_bound","","",168,{"inputs":[{"name":"folder"},{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fold_mt","","",168,{"inputs":[{"name":"folder"},{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fold_field","","",168,{"inputs":[{"name":"folder"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_where_clause","","",168,{"inputs":[{"name":"folder"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",168,{"inputs":[{"name":"folder"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"new_id","","",168,{"inputs":[{"name":"folder"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"new_span","","",168,{"inputs":[{"name":"folder"},{"name":"span"}],"output":{"name":"span"}}],[11,"move_map","collections::vec","",169,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[0,"owned_slice","syntex_syntax","",null,null],[3,"OwnedSlice","syntex_syntax::owned_slice","A non-growable owned slice. This is a separate type to allow the\nrepresentation to change.",null,null],[11,"cmp","","",170,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",170,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"option"}}],[11,"lt","","",170,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"le","","",170,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"gt","","",170,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"ge","","",170,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"eq","","",170,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"hash","","",170,null],[11,"fmt","","",170,{"inputs":[{"name":"ownedslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",170,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"from_vec","","",170,{"inputs":[{"name":"ownedslice"},{"name":"vec"}],"output":{"name":"ownedslice"}}],[11,"into_vec","","",170,{"inputs":[{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"as_slice","","",170,null],[11,"move_iter","","",170,{"inputs":[{"name":"ownedslice"}],"output":{"name":"intoiter"}}],[11,"map","","",170,{"inputs":[{"name":"ownedslice"},{"name":"f"}],"output":{"name":"ownedslice"}}],[11,"deref","","",170,null],[11,"default","","",170,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"clone","","",170,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"from_iter","","",170,{"inputs":[{"name":"ownedslice"},{"name":"i"}],"output":{"name":"ownedslice"}}],[11,"encode","","",170,{"inputs":[{"name":"ownedslice"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",170,{"inputs":[{"name":"ownedslice"},{"name":"d"}],"output":{"name":"result"}}],[0,"parse","syntex_syntax","The main parser interface",null,null],[3,"ParseSess","syntex_syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",171,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"crate"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"vec"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"crate"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"vec"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"p"}}],[5,"parse_item_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"option"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"p"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"option"}}],[5,"parse_tts_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"vec"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate\nif the file doesn't exist",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add\nthe file at the given path to the codemap, and return a parser.\nOn an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"},{"name":"bool"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"vec"}}],[5,"tts_to_parser","","Given tts and cfg, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"vec"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"maybe_aborted","","Abort if necessary",null,{"inputs":[{"name":"t"},{"name":"parser"}],"output":{"name":"t"}}],[5,"char_lit","","Parse a string representing a character literal into its final form.\nRather than just accepting/rejecting a given literal, unescapes it as\nwell. Can take any slice prefixed by a character escape. Returns the\ncharacter and the number of characters consumed.",null,null],[5,"str_lit","","Parse a string representing a string literal into its final form. Does\nunescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The\nonly operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"spanhandler"},{"name":"span"}],"output":{"name":"lit_"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"spanhandler"},{"name":"span"}],"output":{"name":"lit_"}}],[0,"parser","","",null,null],[3,"Restrictions","syntex_syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",172,null],[12,"token","","the current token:",172,null],[12,"span","","the span of the current token:",172,null],[12,"last_span","","the span of the prior token:",172,null],[12,"cfg","","",172,null],[12,"last_token","","the previous token or None (only stashed sometimes).",172,null],[12,"buffer","","",172,null],[12,"buffer_start","","",172,null],[12,"buffer_end","","",172,null],[12,"tokens_consumed","","",172,null],[12,"restrictions","","",172,null],[12,"quote_depth","","",172,null],[12,"reader","","",172,null],[12,"interner","","",172,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress\nextra detail when the same error is seen twice",172,null],[12,"mod_path_stack","","Used to determine the path to externally loaded source files",172,null],[12,"open_braces","","Stack of spans of open delimiters. Used for error message.",172,null],[12,"owns_directory","","Flag if this parser \"owns\" the directory that it is currently parsing\nin. This will affect how nested files are looked up.",172,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the\nname is not known. This does not change while the parser is descending\ninto modules, and sub-parsers have new values for this name.",172,null],[12,"expected_tokens","","",172,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",173,null],[12,"path_exists","","",173,null],[12,"result","","",173,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",174,null],[12,"owns_directory","","",174,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",175,null],[12,"help_msg","","",175,null],[4,"PathParsingMode","","How to parse a path. There are four different kinds of paths, all of which\nare parsed somewhat differently.",null,null],[13,"NoTypesAllowed","","A path with no type parameters; e.g. `foo::bar::Baz`",176,null],[13,"LifetimeAndTypesWithoutColons","","A path with a lifetime and type parameters, with no double colons\nbefore the type parameters; e.g. `foo::bar<'a>::Baz<T>`",176,null],[13,"LifetimeAndTypesWithColons","","A path with a lifetime and type parameters with double colons before\nthe type parameters; e.g. `foo::bar::<'a>::Baz::<T>`",176,null],[4,"BoundParsingMode","","How to parse a bound, whether to allow bound modifiers such as `?`.",null,null],[13,"Bare","","",177,null],[13,"Modified","","",177,null],[4,"ParsePub","","`pub` should be parsed in struct fields and not parsed in variant fields",null,null],[13,"Yes","","",178,null],[13,"No","","",178,null],[4,"TokenType","","",null,null],[13,"Token","","",179,null],[13,"Keyword","","",179,null],[13,"Operator","","",179,null],[17,"RESTRICTION_STMT_EXPR","","",null,null],[17,"RESTRICTION_NO_STRUCT_LITERAL","","",null,null],[11,"hash","","",180,null],[11,"cmp","","",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"option"}}],[11,"lt","","",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"eq","","",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"restrictions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",180,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",180,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",180,{"inputs":[{"name":"restrictions"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",180,{"inputs":[{"name":"restrictions"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",180,{"inputs":[{"name":"restrictions"},{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",180,{"inputs":[{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",180,{"inputs":[{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",180,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"not","","Returns the complement of this set of flags.",180,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"from_iter","","",180,{"inputs":[{"name":"restrictions"},{"name":"t"}],"output":{"name":"restrictions"}}],[11,"eq","","",176,{"inputs":[{"name":"pathparsingmode"},{"name":"pathparsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"pathparsingmode"},{"name":"pathparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"pathparsingmode"}],"output":{"name":"pathparsingmode"}}],[11,"eq","","",177,{"inputs":[{"name":"boundparsingmode"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"boundparsingmode"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"boundparsingmode"}],"output":{"name":"boundparsingmode"}}],[11,"eq","","",178,{"inputs":[{"name":"parsepub"},{"name":"parsepub"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"parsepub"},{"name":"parsepub"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"parsepub"}],"output":{"name":"parsepub"}}],[11,"clone","","",179,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"eq","","",179,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"new","","",172,{"inputs":[{"name":"parser"},{"name":"parsesess"},{"name":"crateconfig"},{"name":"box"}],"output":{"name":"parser"}}],[11,"token_to_string","","Convert a token to a string using self's reader",172,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",172,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[11,"unexpected_last","","",172,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"fatalerror"}}],[11,"unexpected","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"fatalerror"}}],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",172,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"presult"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",172,null],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",172,null],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",172,null],[11,"commit_expr_expecting","","",172,{"inputs":[{"name":"parser"},{"name":"expr"},{"name":"token"}],"output":{"name":"presult"}}],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",172,null],[11,"commit_stmt_expecting","","",172,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"presult"}}],[11,"parse_ident","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_ident_or_self_type","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_path_list_item","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",172,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given\ntoken was present, false otherwise.",172,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"presult"}}],[11,"check_keyword","","",172,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",172,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"presult"}}],[11,"eat_keyword_noexpect","","",172,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"presult"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",172,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"presult"}}],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",172,{"inputs":[{"name":"parser"}],"output":null}],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"expect_no_suffix","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"},{"name":"option"}],"output":null}],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it\nwith a single > and continue. If a GT is not seen,\nsignal an error.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt_or_return","","",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping\nbefore the '>'.",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt","","",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt_or_return","","",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",172,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",172,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",172,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",172,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq","","",172,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"bump","","Advance the parser by one token",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"replace_token","","EFFECT: replace the current token and span with the given one",172,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"bytepos"},{"name":"bytepos"}],"output":null}],[11,"buffer_length","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"isize"}}],[11,"look_ahead","","",172,{"inputs":[{"name":"parser"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",172,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_help","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_note","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_help","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_suggestion","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":null}],[11,"fileline_help","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":null}],[11,"bug","","",172,{"inputs":[{"name":"parser"},{"name":"str"}],"output":null}],[11,"warn","","",172,{"inputs":[{"name":"parser"},{"name":"str"}],"output":null}],[11,"span_warn","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_bug","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":null}],[11,"abort_if_errors","","",172,{"inputs":[{"name":"parser"}],"output":null}],[11,"id_to_interned_str","","",172,{"inputs":[{"name":"parser"},{"name":"ident"}],"output":{"name":"internedstring"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",172,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"get_lifetime","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"ident"}}],[11,"parse_for_in_type","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_ty_path","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_ty_bare_fn","","parse a TyBareFn type:",172,{"inputs":[{"name":"parser"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_unsafety","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_trait_items","","Parse the items in a trait declaration",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_mt","","Parse a possibly mutable type",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_ty","","Parse a type.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_borrowed_pointee","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_ptr","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"is_named_argument","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require\nidentifier names.",172,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_arg","","Parse a single function argument",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"maybe_parse_fixed_length_of_vec","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"lit_from_token","","Matches token_lit = LIT_INTEGER | ...",172,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"presult"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_literal_maybe_minus","","matches '-' lit | lit",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_qualified_path","","Parses qualified path.",172,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"presult"}}],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",172,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"presult"}}],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b<T,U>::c<V,W>`\n- `a::b<T,U>::c(V) -> W`\n- `a::b<T,U>::c(V)`",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::<T,U>::c`",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\nlifetime [':' lifetimes]`",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",172,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"presult"}}],[11,"parse_mutability","","Parse mutability declaration (mut/const/imm)",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_field","","Parse ident COLON expr",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"mk_expr","","",172,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"bytepos"},{"name":"expr_"}],"output":{"name":"p"}}],[11,"mk_unary","","",172,{"inputs":[{"name":"parser"},{"name":"unop"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_binary","","",172,{"inputs":[{"name":"parser"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_call","","",172,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"vec"}],"output":{"name":"expr_"}}],[11,"mk_index","","",172,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_range","","",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"option"}],"output":{"name":"expr_"}}],[11,"mk_field","","",172,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"spannedident"}],"output":{"name":"expr_"}}],[11,"mk_tup_field","","",172,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"spanned"}],"output":{"name":"expr_"}}],[11,"mk_assign_op","","",172,{"inputs":[{"name":"parser"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_mac_expr","","",172,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"bytepos"},{"name":"mac_"}],"output":{"name":"p"}}],[11,"mk_lit_u32","","",172,{"inputs":[{"name":"parser"},{"name":"u32"}],"output":{"name":"p"}}],[11,"parse_bottom_expr","","At the bottom (top?) of the precedence hierarchy,\nparse things like parenthesized exprs,\nmacros, return, etc.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_block_expr","","Parse a block or unsafe block",172,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"blockcheckmode"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr_with","","",172,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"presult"}}],[11,"check_unknown_macro_variable","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_token_tree","","parse a single token tree from the input.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_all_token_trees","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr","","Parse an associative expression",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",172,{"inputs":[{"name":"parser"},{"name":"usize"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_lambda_expr","","",172,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"captureclause"}],"output":{"name":"presult"}}],[11,"parse_else_expr","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"presult"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"presult"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"presult"}}],[11,"parse_loop_expr","","",172,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"presult"}}],[11,"parse_arm","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_expr","","Parse an expression",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"with_res","","Evaluate the closure with restrictions in place.",172,{"inputs":[{"name":"parser"},{"name":"restrictions"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",172,{"inputs":[{"name":"parser"},{"name":"restrictions"}],"output":{"name":"presult"}}],[11,"parse_pat","","Parse a pattern.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_stmt","","Parse a statement. may include decl.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",172,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",172,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to\nand including the `fn` keyword:",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_impl_item","","Parse an impl item.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_record_struct_body","","",172,{"inputs":[{"name":"parser"},{"name":"parsepub"}],"output":{"name":"presult"}}],[11,"parse_tuple_struct_body","","",172,{"inputs":[{"name":"parser"},{"name":"parsepub"}],"output":{"name":"presult"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",172,{"inputs":[{"name":"parser"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"submod_path_from_attr","","",172,null],[11,"default_submod_path","","Returns either a path to a module, or .",172,{"inputs":[{"name":"parser"},{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_optional_str","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_str","","",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[0,"lexer","syntex_syntax::parse","",null,null],[3,"TokenAndSpan","syntex_syntax::parse::lexer","",null,null],[12,"tok","","",181,null],[12,"sp","","",181,null],[3,"StringReader","","",null,null],[12,"span_diagnostic","","",182,null],[12,"pos","","The absolute offset within the codemap of the next character to read",182,null],[12,"last_pos","","The absolute offset within the codemap of the last character read(curr)",182,null],[12,"col","","The column of the next character to read",182,null],[12,"curr","","The last character to be read",182,null],[12,"filemap","","",182,null],[12,"peek_tok","","",182,null],[12,"peek_span","","",182,null],[5,"is_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntex_syntax::parse::lexer::comments","",null,null],[12,"style","","",183,null],[12,"lines","","",183,null],[12,"pos","","",183,null],[3,"Literal","","",null,null],[12,"lit","","",184,null],[12,"pos","","",184,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",185,null],[13,"Trailing","","Code exists to the left of the comment",185,null],[13,"Mixed","","Code before /* foo */ and after the comment",185,null],[13,"BlankLine","","Just a manual blank line \"\\n\\n\", for layout",185,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"eq","","",185,{"inputs":[{"name":"commentstyle"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"commentstyle"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"commentstyle"}],"output":{"name":"commentstyle"}}],[11,"clone","","",183,{"inputs":[{"name":"comment"}],"output":{"name":"comment"}}],[11,"clone","","",184,{"inputs":[{"name":"literal"}],"output":{"name":"literal"}}],[8,"Reader","syntex_syntax::parse::lexer","",null,null],[10,"is_eof","","",186,{"inputs":[{"name":"reader"}],"output":{"name":"bool"}}],[10,"next_token","","",186,{"inputs":[{"name":"reader"}],"output":{"name":"tokenandspan"}}],[10,"fatal","","Report a fatal error with the current span.",186,{"inputs":[{"name":"reader"},{"name":"str"}],"output":{"name":"fatalerror"}}],[10,"err","","Report a non-fatal error with the current span.",186,{"inputs":[{"name":"reader"},{"name":"str"}],"output":null}],[10,"peek","","",186,{"inputs":[{"name":"reader"}],"output":{"name":"tokenandspan"}}],[11,"real_token","","Get a token the parser cares about.",186,{"inputs":[{"name":"reader"}],"output":{"name":"tokenandspan"}}],[11,"fmt","","",181,{"inputs":[{"name":"tokenandspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",181,{"inputs":[{"name":"tokenandspan"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"tokenandspan"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"tokenandspan"}],"output":{"name":"tokenandspan"}}],[11,"is_eof","","",182,{"inputs":[{"name":"stringreader"}],"output":{"name":"bool"}}],[11,"next_token","","Return the next token. EFFECT: advances the string_reader.",182,{"inputs":[{"name":"stringreader"}],"output":{"name":"tokenandspan"}}],[11,"fatal","","",182,{"inputs":[{"name":"stringreader"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",182,{"inputs":[{"name":"stringreader"},{"name":"str"}],"output":null}],[11,"peek","","",182,{"inputs":[{"name":"stringreader"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","","For comments.rs, which hackily pokes into pos and curr",182,{"inputs":[{"name":"stringreader"},{"name":"spanhandler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",182,{"inputs":[{"name":"stringreader"},{"name":"spanhandler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",182,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",182,{"inputs":[{"name":"stringreader"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err_span","","Report a lexical error with a given span.",182,{"inputs":[{"name":"stringreader"},{"name":"span"},{"name":"str"}],"output":null}],[11,"help_span","","Suggest some help with a given span.",182,{"inputs":[{"name":"stringreader"},{"name":"span"},{"name":"str"}],"output":null}],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",182,{"inputs":[{"name":"stringreader"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",182,{"inputs":[{"name":"stringreader"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",182,{"inputs":[{"name":"stringreader"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap's list of line start offsets.",182,{"inputs":[{"name":"stringreader"}],"output":null}],[11,"nextch","","",182,{"inputs":[{"name":"stringreader"}],"output":{"name":"option"}}],[11,"nextch_is","","",182,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",182,{"inputs":[{"name":"stringreader"}],"output":{"name":"option"}}],[11,"nextnextch_is","","",182,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[0,"token","syntex_syntax::parse","",null,null],[3,"InternedString","syntex_syntax::parse::token","Represents a string stored in the thread-local interner. Because the\ninterner lives for the life of the thread, this can be safely treated as an\nimmortal string, as long as it never crosses between threads.",null,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",187,null],[13,"Minus","","",187,null],[13,"Star","","",187,null],[13,"Slash","","",187,null],[13,"Percent","","",187,null],[13,"Caret","","",187,null],[13,"And","","",187,null],[13,"Or","","",187,null],[13,"Shl","","",187,null],[13,"Shr","","",187,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",188,null],[13,"Bracket","","A square bracket: `[` or `]`",188,null],[13,"Brace","","A curly brace: `{` or `}`",188,null],[4,"IdentStyle","","",null,null],[13,"ModName","","`::` follows the identifier with no whitespace in-between.",189,null],[13,"Plain","","",189,null],[4,"SpecialMacroVar","","",null,null],[13,"CrateMacroVar","","`$crate` will be filled in with the name of the crate a macro was\nimported from, if any.",190,null],[4,"Lit","","",null,null],[13,"Byte","","",191,null],[13,"Char","","",191,null],[13,"Integer","","",191,null],[13,"Float","","",191,null],[13,"Str_","","",191,null],[13,"StrRaw","","",191,null],[13,"ByteStr","","",191,null],[13,"ByteStrRaw","","",191,null],[4,"Token","","",null,null],[13,"Eq","","",192,null],[13,"Lt","","",192,null],[13,"Le","","",192,null],[13,"EqEq","","",192,null],[13,"Ne","","",192,null],[13,"Ge","","",192,null],[13,"Gt","","",192,null],[13,"AndAnd","","",192,null],[13,"OrOr","","",192,null],[13,"Not","","",192,null],[13,"Tilde","","",192,null],[13,"BinOp","","",192,null],[13,"BinOpEq","","",192,null],[13,"At","","",192,null],[13,"Dot","","",192,null],[13,"DotDot","","",192,null],[13,"DotDotDot","","",192,null],[13,"Comma","","",192,null],[13,"Semi","","",192,null],[13,"Colon","","",192,null],[13,"ModSep","","",192,null],[13,"RArrow","","",192,null],[13,"LArrow","","",192,null],[13,"FatArrow","","",192,null],[13,"Pound","","",192,null],[13,"Dollar","","",192,null],[13,"Question","","",192,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",192,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",192,null],[13,"Literal","","",192,null],[13,"Ident","","",192,null],[13,"Underscore","","",192,null],[13,"Lifetime","","",192,null],[13,"Interpolated","","",192,null],[13,"DocComment","","Doc comment",192,null],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT, styles of their idents)",192,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",192,null],[13,"SpecialVarNt","","A macro variable with special meaning.",192,null],[13,"Whitespace","","Whitespace",192,null],[13,"Comment","","Comment",192,null],[13,"Shebang","","",192,null],[13,"Eof","","",192,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",193,null],[13,"NtBlock","","",193,null],[13,"NtStmt","","",193,null],[13,"NtPat","","",193,null],[13,"NtExpr","","",193,null],[13,"NtTy","","",193,null],[13,"NtIdent","","",193,null],[13,"NtMeta","","Stuff inside brackets for attributes",193,null],[13,"NtPath","","",193,null],[13,"NtTT","","",193,null],[13,"NtArm","","",193,null],[13,"NtImplItem","","",193,null],[13,"NtTraitItem","","",193,null],[13,"NtGenerics","","",193,null],[13,"NtWhereClause","","",193,null],[13,"NtArg","","",193,null],[5,"get_ident_interner","","",null,{"inputs":[],"output":{"name":"rc"}}],[5,"reset_ident_interner","","Reset the ident interner to its initial state.",null,{"inputs":[],"output":null}],[5,"intern_and_get_ident","","Interns and returns the string contents of an identifier, using the\nthread-local interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[5,"intern","","Maps a string to its interned representation.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"gensym","","gensym's a new usize, using the current interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"str_to_ident","","Maps a string to an identifier with an empty syntax context.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"gensym_ident","","Maps a string to a gensym'ed identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"fresh_name","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[5,"fresh_mark","","",null,{"inputs":[],"output":{"name":"mrk"}}],[0,"special_idents","","",null,null],[17,"invalid","syntex_syntax::parse::token::special_idents","",null,null],[17,"self_","","",null,null],[17,"statik","","",null,null],[17,"super_","","",null,null],[17,"static_lifetime","","",null,null],[17,"tt","","",null,null],[17,"matchers","","",null,null],[17,"clownshoe_abi","","",null,null],[17,"opaque","","",null,null],[17,"unnamed_field","","",null,null],[17,"type_self","","",null,null],[17,"prelude_import","","",null,null],[0,"special_names","syntex_syntax::parse::token","",null,null],[17,"invalid","syntex_syntax::parse::token::special_names","",null,null],[17,"self_","","",null,null],[17,"statik","","",null,null],[17,"super_","","",null,null],[17,"static_lifetime","","",null,null],[17,"tt","","",null,null],[17,"matchers","","",null,null],[17,"clownshoe_abi","","",null,null],[17,"opaque","","",null,null],[17,"unnamed_field","","",null,null],[17,"type_self","","",null,null],[17,"prelude_import","","",null,null],[0,"keywords","syntex_syntax::parse::token","All the valid words that have meaning in the Rust language.",null,null],[4,"Keyword","syntex_syntax::parse::token::keywords","",null,null],[13,"As","","",194,null],[13,"Break","","",194,null],[13,"Crate","","",194,null],[13,"Else","","",194,null],[13,"Enum","","",194,null],[13,"Extern","","",194,null],[13,"False","","",194,null],[13,"Fn","","",194,null],[13,"For","","",194,null],[13,"If","","",194,null],[13,"Impl","","",194,null],[13,"In","","",194,null],[13,"Let","","",194,null],[13,"Loop","","",194,null],[13,"Match","","",194,null],[13,"Mod","","",194,null],[13,"Move","","",194,null],[13,"Mut","","",194,null],[13,"Pub","","",194,null],[13,"Ref","","",194,null],[13,"Return","","",194,null],[13,"Static","","",194,null],[13,"SelfValue","","",194,null],[13,"SelfType","","",194,null],[13,"Struct","","",194,null],[13,"Super","","",194,null],[13,"True","","",194,null],[13,"Trait","","",194,null],[13,"Type","","",194,null],[13,"Unsafe","","",194,null],[13,"Use","","",194,null],[13,"While","","",194,null],[13,"Continue","","",194,null],[13,"Box","","",194,null],[13,"Const","","",194,null],[13,"Where","","",194,null],[13,"Virtual","","",194,null],[13,"Proc","","",194,null],[13,"Alignof","","",194,null],[13,"Become","","",194,null],[13,"Offsetof","","",194,null],[13,"Priv","","",194,null],[13,"Pure","","",194,null],[13,"Sizeof","","",194,null],[13,"Typeof","","",194,null],[13,"Unsized","","",194,null],[13,"Yield","","",194,null],[13,"Do","","",194,null],[13,"Abstract","","",194,null],[13,"Final","","",194,null],[13,"Override","","",194,null],[13,"Macro","","",194,null],[11,"eq","","",194,{"inputs":[{"name":"keyword"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"keyword"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"keyword"}],"output":{"name":"keyword"}}],[11,"to_name","","",194,{"inputs":[{"name":"keyword"}],"output":{"name":"name"}}],[6,"IdentInterner","syntex_syntax::parse::token","",null,null],[17,"SELF_KEYWORD_NAME","","",null,null],[17,"SELF_KEYWORD_NAME_NUM","","",null,null],[11,"fmt","","",187,{"inputs":[{"name":"binoptoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",187,null],[11,"eq","","",187,{"inputs":[{"name":"binoptoken"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"binoptoken"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"decode","","",187,{"inputs":[{"name":"binoptoken"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",187,{"inputs":[{"name":"binoptoken"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"binoptoken"}],"output":{"name":"binoptoken"}}],[11,"fmt","","",188,{"inputs":[{"name":"delimtoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",188,null],[11,"eq","","",188,{"inputs":[{"name":"delimtoken"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"delimtoken"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"decode","","",188,{"inputs":[{"name":"delimtoken"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",188,{"inputs":[{"name":"delimtoken"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"delimtoken"}],"output":{"name":"delimtoken"}}],[11,"fmt","","",189,{"inputs":[{"name":"identstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",189,null],[11,"eq","","",189,{"inputs":[{"name":"identstyle"},{"name":"identstyle"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"identstyle"},{"name":"identstyle"}],"output":{"name":"bool"}}],[11,"decode","","",189,{"inputs":[{"name":"identstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",189,{"inputs":[{"name":"identstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"identstyle"}],"output":{"name":"identstyle"}}],[11,"fmt","","",190,{"inputs":[{"name":"specialmacrovar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",190,null],[11,"eq","","",190,{"inputs":[{"name":"specialmacrovar"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"specialmacrovar"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"decode","","",190,{"inputs":[{"name":"specialmacrovar"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",190,{"inputs":[{"name":"specialmacrovar"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"specialmacrovar"}],"output":{"name":"specialmacrovar"}}],[11,"as_str","","",190,{"inputs":[{"name":"specialmacrovar"}],"output":{"name":"str"}}],[11,"fmt","","",191,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",191,null],[11,"eq","","",191,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"decode","","",191,{"inputs":[{"name":"lit"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",191,{"inputs":[{"name":"lit"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",191,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"short_name","","",191,{"inputs":[{"name":"lit"}],"output":{"name":"str"}}],[11,"fmt","","",192,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",192,null],[11,"eq","","",192,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"decode","","",192,{"inputs":[{"name":"token"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",192,{"inputs":[{"name":"token"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_plain_ident","","Returns `true` if the token is a path that is not followed by a `::`\ntoken.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"to_binop","","Maps a token to its corresponding binary operator.",192,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",192,{"inputs":[{"name":"token"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_keyword_allow_following_colon","","",192,{"inputs":[{"name":"token"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_any_keyword","","Returns `true` if the token is either a special identifier, or a strict\nor reserved keyword.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_strict_keyword","","Returns `true` if the token may not appear as an identifier.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword that has been reserved for\npossible future use.",192,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"mtwt_eq","","Hygienic identifier equality comparison.",192,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",193,null],[11,"eq","","",193,{"inputs":[{"name":"nonterminal"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"nonterminal"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"decode","","",193,{"inputs":[{"name":"nonterminal"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",193,{"inputs":[{"name":"nonterminal"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fmt","","",193,{"inputs":[{"name":"nonterminal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",195,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",195,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",195,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",195,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",195,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",195,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"hash","","",195,null],[11,"eq","","",195,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"clone","","",195,{"inputs":[{"name":"internedstring"}],"output":{"name":"internedstring"}}],[11,"new","","",195,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",195,{"inputs":[{"name":"internedstring"},{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",195,{"inputs":[{"name":"internedstring"}],"output":{"name":"str"}}],[11,"fmt","","",195,{"inputs":[{"name":"internedstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"internedstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",195,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"decode","","",195,{"inputs":[{"name":"internedstring"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",195,{"inputs":[{"name":"internedstring"},{"name":"s"}],"output":{"name":"result"}}],[0,"attr","syntex_syntax::parse","",null,null],[11,"parse_outer_attributes","syntex_syntax::parse::parser","Parse attributes that appear before an item",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",172,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",172,{"inputs":[{"name":"parser"}],"output":{"name":"presult"}}],[0,"common","syntex_syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntex_syntax::parse::common","SeqSep : a sequence separator (token)\nand whether a trailing separator is allowed.",null,null],[12,"sep","","",196,null],[12,"trailing_sep_allowed","","",196,null],[5,"seq_sep_trailing_allowed","","",null,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[5,"seq_sep_none","","",null,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntex_syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntex_syntax::parse::classify","Does this expression require a semicolon to be treated\nas a statement? The negation of this: 'can this expression\nbe used as a statement without a semicolon' -- is used\nas an early-bail-out in the parser so that, for instance,\n    if true {...} else {...}\n     |x| 5\nisn't parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it.\nnote that in one case (stmt_semi), we've already\nseen the semicolon, and thus don't need another.",null,{"inputs":[{"name":"stmt_"}],"output":{"name":"bool"}}],[0,"obsolete","syntex_syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of\nthese syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntex_syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[13,"ClosureKind","","",197,null],[13,"ExternCrateString","","",197,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",198,{"inputs":[{"name":"parserobsoletemethods"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[10,"report","","",198,{"inputs":[{"name":"parserobsoletemethods"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[11,"hash","","",197,null],[11,"eq","","",197,{"inputs":[{"name":"obsoletesyntax"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"obsoletesyntax"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"clone","","",197,{"inputs":[{"name":"obsoletesyntax"}],"output":{"name":"obsoletesyntax"}}],[11,"obsolete","syntex_syntax::parse::parser","Reports an obsolete syntax non-fatal error.",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[11,"report","","",172,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[6,"PResult","syntex_syntax::parse","",null,null],[11,"new","","",171,{"inputs":[{"name":"parsesess"}],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",171,{"inputs":[{"name":"parsesess"},{"name":"spanhandler"}],"output":{"name":"parsesess"}}],[11,"codemap","","",171,{"inputs":[{"name":"parsesess"}],"output":{"name":"codemap"}}],[0,"ptr","syntex_syntax","The AST pointer",null,null],[3,"P","syntex_syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P<T>` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",199,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"u"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",199,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",199,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[11,"clone","","",199,{"inputs":[{"name":"p"}],"output":{"name":"p"}}],[11,"eq","","",199,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"fmt","","",199,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",199,{"inputs":[{"name":"p"},{"name":"h"}],"output":null}],[11,"decode","","",199,{"inputs":[{"name":"p"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",199,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[0,"show_span","syntex_syntax","Span debugger",null,null],[5,"run","syntex_syntax::show_span","",null,{"inputs":[{"name":"spanhandler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntex_syntax","",null,null],[5,"maybe_inject_crates_ref","syntex_syntax::std_inject","",null,{"inputs":[{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[5,"maybe_inject_prelude","","",null,{"inputs":[{"name":"parsesess"},{"name":"crate"}],"output":{"name":"crate"}}],[5,"no_core","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[5,"no_std","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[0,"str","syntex_syntax","",null,null],[5,"char_at","syntex_syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[5,"slice_shift_char","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"test","syntex_syntax","",null,null],[5,"modify_for_testing","syntex_syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"crate"},{"name":"spanhandler"}],"output":{"name":"crate"}}],[0,"visit","syntex_syntax","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node's children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[4,"FnKind","syntex_syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",200,null],[13,"Method","","fn foo(&self)",200,null],[13,"Closure","","|x, y| {}",200,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_explicit_self","","",null,{"inputs":[{"name":"v"},{"name":"explicitself"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_decl","","",null,{"inputs":[{"name":"v"},{"name":"decl"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method's default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",201,{"inputs":[{"name":"visitor"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_ident","","",201,{"inputs":[{"name":"visitor"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",201,{"inputs":[{"name":"visitor"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",201,{"inputs":[{"name":"visitor"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",201,{"inputs":[{"name":"visitor"},{"name":"item"}],"output":null}],[11,"visit_local","","",201,{"inputs":[{"name":"visitor"},{"name":"local"}],"output":null}],[11,"visit_block","","",201,{"inputs":[{"name":"visitor"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",201,{"inputs":[{"name":"visitor"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",201,{"inputs":[{"name":"visitor"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",201,{"inputs":[{"name":"visitor"},{"name":"pat"}],"output":null}],[11,"visit_decl","","",201,{"inputs":[{"name":"visitor"},{"name":"decl"}],"output":null}],[11,"visit_expr","","",201,{"inputs":[{"name":"visitor"},{"name":"expr"}],"output":null}],[11,"visit_expr_post","","",201,{"inputs":[{"name":"visitor"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",201,{"inputs":[{"name":"visitor"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",201,{"inputs":[{"name":"visitor"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",201,{"inputs":[{"name":"visitor"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",201,{"inputs":[{"name":"visitor"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",201,{"inputs":[{"name":"visitor"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",201,{"inputs":[{"name":"visitor"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",201,{"inputs":[{"name":"visitor"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",201,{"inputs":[{"name":"visitor"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",201,{"inputs":[{"name":"visitor"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",201,{"inputs":[{"name":"visitor"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",201,{"inputs":[{"name":"visitor"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",201,{"inputs":[{"name":"visitor"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",201,{"inputs":[{"name":"visitor"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",201,{"inputs":[{"name":"visitor"},{"name":"lifetimedef"}],"output":null}],[11,"visit_explicit_self","","",201,{"inputs":[{"name":"visitor"},{"name":"explicitself"}],"output":null}],[11,"visit_mac","","",201,{"inputs":[{"name":"visitor"},{"name":"mac"}],"output":null}],[11,"visit_path","","",201,{"inputs":[{"name":"visitor"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",201,{"inputs":[{"name":"visitor"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_segment","","",201,{"inputs":[{"name":"visitor"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",201,{"inputs":[{"name":"visitor"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",201,{"inputs":[{"name":"visitor"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",201,{"inputs":[{"name":"visitor"},{"name":"attribute"}],"output":null}],[11,"visit_macro_def","","",201,{"inputs":[{"name":"visitor"},{"name":"macrodef"}],"output":null}],[11,"eq","","",200,{"inputs":[{"name":"fnkind"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"fnkind"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"clone","","",200,{"inputs":[{"name":"fnkind"}],"output":{"name":"fnkind"}}],[0,"print","syntex_syntax","",null,null],[0,"pp","syntex_syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton's\nMesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntex_syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","In case you do not have the paper, here is an explanation of what's going\non.",null,null],[12,"out","","",202,null],[4,"Breaks","","",null,null],[13,"Consistent","","",203,null],[13,"Inconsistent","","",203,null],[4,"Token","","",null,null],[13,"String","","",204,null],[13,"Break","","",204,null],[13,"Begin","","",204,null],[13,"End","","",204,null],[13,"Eof","","",204,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",205,null],[13,"Broken","","",205,null],[5,"tok_str","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"buf_str","","",null,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"eq","","",203,{"inputs":[{"name":"breaks"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"breaks"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",203,{"inputs":[{"name":"breaks"}],"output":{"name":"breaks"}}],[11,"clone","","",206,{"inputs":[{"name":"breaktoken"}],"output":{"name":"breaktoken"}}],[11,"clone","","",207,{"inputs":[{"name":"begintoken"}],"output":{"name":"begintoken"}}],[11,"clone","","",204,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"is_eof","","",204,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",204,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"printstackbreak"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",208,{"inputs":[{"name":"printstackelem"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",202,{"inputs":[{"name":"printer"}],"output":{"name":"token"}}],[11,"replace_last_token","","",202,{"inputs":[{"name":"printer"},{"name":"token"}],"output":null}],[11,"pretty_print","","",202,{"inputs":[{"name":"printer"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",202,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[11,"scan_push","","",202,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":null}],[11,"scan_pop","","",202,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"scan_top","","",202,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",202,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"advance_right","","",202,{"inputs":[{"name":"printer"}],"output":null}],[11,"advance_left","","",202,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[11,"check_stack","","",202,{"inputs":[{"name":"printer"},{"name":"isize"}],"output":null}],[11,"print_newline","","",202,{"inputs":[{"name":"printer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",202,{"inputs":[{"name":"printer"},{"name":"isize"}],"output":null}],[11,"get_top","","",202,{"inputs":[{"name":"printer"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",202,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",202,{"inputs":[{"name":"printer"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[0,"pprust","syntex_syntax::print","",null,null],[3,"NoAnn","syntex_syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",209,null],[12,"cur_lit","","",209,null],[3,"State","","",null,null],[12,"s","","",210,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",211,null],[13,"NodeName","","",211,null],[13,"NodeBlock","","",211,null],[13,"NodeItem","","",211,null],[13,"NodeSubItem","","",211,null],[13,"NodeExpr","","",211,null],[13,"NodePat","","",211,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward.",null,{"inputs":[{"name":"codemap"},{"name":"spanhandler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"ty_param_to_string","","",null,{"inputs":[{"name":"typaram"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"option"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"explicit_self_to_string","","",null,{"inputs":[{"name":"explicitself_"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"indent_unit","","",null,null],[17,"default_columns","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",212,{"inputs":[{"name":"ppann"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",212,{"inputs":[{"name":"ppann"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[8,"PrintState","","",null,null],[10,"writer","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"printer"}}],[10,"boxes","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"vec"}}],[10,"comments","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"option"}}],[10,"cur_cmnt_and_lit","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"currentcommentandliteral"}}],[10,"literals","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"option"}}],[11,"word_space","","",213,{"inputs":[{"name":"printstate"},{"name":"str"}],"output":{"name":"result"}}],[11,"popen","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"result"}}],[11,"pclose","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"result"}}],[11,"is_begin","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"bool"}}],[11,"is_end","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"bool"}}],[11,"is_bol","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"bool"}}],[11,"hardbreak_if_not_bol","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"result"}}],[11,"rbox","","",213,{"inputs":[{"name":"printstate"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[11,"ibox","","",213,{"inputs":[{"name":"printstate"},{"name":"usize"}],"output":{"name":"result"}}],[11,"end","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"result"}}],[11,"commasep","","",213,null],[11,"next_lit","","",213,{"inputs":[{"name":"printstate"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"maybe_print_comment","","",213,{"inputs":[{"name":"printstate"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"print_comment","","",213,{"inputs":[{"name":"printstate"},{"name":"comment"}],"output":{"name":"result"}}],[11,"next_comment","","",213,{"inputs":[{"name":"printstate"}],"output":{"name":"option"}}],[11,"print_literal","","",213,{"inputs":[{"name":"printstate"},{"name":"lit"}],"output":{"name":"result"}}],[11,"print_string","","",213,{"inputs":[{"name":"printstate"},{"name":"str"},{"name":"strstyle"}],"output":{"name":"result"}}],[11,"print_inner_attributes","","",213,null],[11,"print_outer_attributes","","",213,null],[11,"print_attribute","","",213,{"inputs":[{"name":"printstate"},{"name":"attribute"}],"output":{"name":"result"}}],[11,"print_meta_item","","",213,{"inputs":[{"name":"printstate"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"clone","","",214,{"inputs":[{"name":"noann"}],"output":{"name":"noann"}}],[11,"clone","","",209,{"inputs":[{"name":"currentcommentandliteral"}],"output":{"name":"currentcommentandliteral"}}],[11,"new_from_input","","",210,{"inputs":[{"name":"state"},{"name":"codemap"},{"name":"spanhandler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",210,{"inputs":[{"name":"state"},{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",210,{"inputs":[{"name":"state"}],"output":{"name":"printer"}}],[11,"boxes","","",210,{"inputs":[{"name":"state"}],"output":{"name":"vec"}}],[11,"comments","","",210,{"inputs":[{"name":"state"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",210,{"inputs":[{"name":"state"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",210,{"inputs":[{"name":"state"}],"output":{"name":"option"}}],[11,"cbox","","",210,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"nbsp","","",210,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"word_nbsp","","",210,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",210,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",210,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"bclose_","","",210,{"inputs":[{"name":"state"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",210,{"inputs":[{"name":"state"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",210,{"inputs":[{"name":"state"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",210,{"inputs":[{"name":"state"}],"output":{"name":"bool"}}],[11,"space_if_not_bol","","",210,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"break_offset_if_not_bol","","",210,{"inputs":[{"name":"state"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",210,{"inputs":[{"name":"state"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",210,null],[11,"commasep_exprs","","",210,null],[11,"print_mod","","",210,null],[11,"print_foreign_mod","","",210,null],[11,"print_opt_lifetime","","",210,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",210,{"inputs":[{"name":"state"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",210,{"inputs":[{"name":"state"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",210,{"inputs":[{"name":"state"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",210,{"inputs":[{"name":"state"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",210,null],[11,"print_visibility","","",210,{"inputs":[{"name":"state"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",210,{"inputs":[{"name":"state"},{"name":"variantdata"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it'd be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",210,{"inputs":[{"name":"state"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",210,null],[11,"print_variant","","",210,{"inputs":[{"name":"state"},{"name":"variant"}],"output":{"name":"result"}}],[11,"print_method_sig","","",210,{"inputs":[{"name":"state"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",210,{"inputs":[{"name":"state"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",210,{"inputs":[{"name":"state"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",210,{"inputs":[{"name":"state"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"print_block","","",210,{"inputs":[{"name":"state"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",210,{"inputs":[{"name":"state"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_indent","","",210,{"inputs":[{"name":"state"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",210,null],[11,"print_block_maybe_unclosed","","",210,null],[11,"print_if","","",210,{"inputs":[{"name":"state"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",210,{"inputs":[{"name":"state"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",210,{"inputs":[{"name":"state"},{"name":"mac"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"check_expr_bin_needs_paren","","",210,{"inputs":[{"name":"state"},{"name":"expr"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"print_expr_maybe_paren","","",210,{"inputs":[{"name":"state"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",210,{"inputs":[{"name":"state"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",210,{"inputs":[{"name":"state"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_decl","","",210,{"inputs":[{"name":"state"},{"name":"decl"}],"output":{"name":"result"}}],[11,"print_ident","","",210,{"inputs":[{"name":"state"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",210,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",210,{"inputs":[{"name":"state"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",210,{"inputs":[{"name":"state"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",210,{"inputs":[{"name":"state"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",210,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"option"},{"name":"generics"},{"name":"option"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args","","",210,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",210,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",210,{"inputs":[{"name":"state"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",210,{"inputs":[{"name":"state"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"print_bounds","","",210,null],[11,"print_lifetime","","",210,{"inputs":[{"name":"state"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_def","","",210,{"inputs":[{"name":"state"},{"name":"lifetimedef"}],"output":{"name":"result"}}],[11,"print_generics","","",210,{"inputs":[{"name":"state"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",210,{"inputs":[{"name":"state"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",210,{"inputs":[{"name":"state"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_view_path","","",210,{"inputs":[{"name":"state"},{"name":"viewpath"}],"output":{"name":"result"}}],[11,"print_mutability","","",210,{"inputs":[{"name":"state"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",210,{"inputs":[{"name":"state"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",210,{"inputs":[{"name":"state"},{"name":"arg"}],"output":{"name":"result"}}],[11,"print_fn_output","","",210,{"inputs":[{"name":"state"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",210,{"inputs":[{"name":"state"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"},{"name":"option"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",210,{"inputs":[{"name":"state"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",210,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",210,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",210,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",210,{"inputs":[{"name":"state"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",210,{"inputs":[{"name":"state"},{"name":"unsafety"}],"output":{"name":"result"}}],[0,"ext","syntex_syntax","",null,null],[0,"asm","syntex_syntax::ext","",null,null],[5,"expand_asm","syntex_syntax::ext::asm","",null,null],[0,"base","syntex_syntax::ext","",null,null],[3,"MacEager","syntex_syntax::ext::base","`MacResult` implementation for the common case where you've already\nbuilt each form of AST that you might return.",null,null],[12,"expr","","",215,null],[12,"pat","","",215,null],[12,"items","","",215,null],[12,"impl_items","","",215,null],[12,"stmts","","",215,null],[12,"ty","","",215,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue\nafter hitting errors.",null,null],[3,"BlockInfo","","",null,null],[12,"macros_escape","","Should macros escape from this scope?",216,null],[12,"pending_renames","","What are the pending renames?",216,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go;\nwhen a macro expansion occurs, the resulting nodes have the backtrace()\n-> expn_info of their expansion context stored into their span.",null,null],[12,"parse_sess","","",217,null],[12,"cfg","","",217,null],[12,"backtrace","","",217,null],[12,"ecfg","","",217,null],[12,"crate_root","","",217,null],[12,"feature_gated_cfgs","","",217,null],[12,"mod_path","","",217,null],[12,"exported_macros","","",217,null],[12,"syntax_env","","",217,null],[12,"recursion_count","","",217,null],[3,"SyntaxEnv","","In order to have some notion of scoping for macros,\nwe want to implement the notion of a transformation\nenvironment.",null,null],[12,"names","","All bang-style macro/extension names\nencountered so far; to be used for diagnostics in resolve",218,null],[4,"Annotatable","","",null,null],[13,"Item","","",219,null],[13,"TraitItem","","",219,null],[13,"ImplItem","","",219,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items\nbased upon it.",220,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it\nin-place. More flexible version than Modifier.",220,null],[13,"NormalTT","","A normal, function-like syntax extension.",220,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before\nthe block.",220,null],[13,"MacroRulesTT","","Represents `macro_rules!` itself.",220,null],[5,"expr_to_string","","Extract a string literal from the macro expanded version of `expr`,\nemitting `err_msg` if `expr` is not a string literal. This does not stop\ncompilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function\nreturns even when `tts` is non-empty, macros that *need* to stop\ncompilation should call\n`cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be\ndone as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this\nis not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a\nparsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",221,{"inputs":[{"name":"multiitemdecorator"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[8,"MultiItemModifier","","",null,null],[10,"expand","","",222,{"inputs":[{"name":"multiitemmodifier"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"annotatable"}}],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",223,null],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",224,{"inputs":[{"name":"identmacroexpander"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"box"}}],[8,"MacResult","","The result of a macro expansion. The return values of the various\nmethods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",225,{"inputs":[{"name":"macresult"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",225,{"inputs":[{"name":"macresult"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",225,{"inputs":[{"name":"macresult"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",225,{"inputs":[{"name":"macresult"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",225,{"inputs":[{"name":"macresult"}],"output":{"name":"option"}}],[11,"make_ty","","",225,{"inputs":[{"name":"macresult"}],"output":{"name":"option"}}],[11,"clone","","",219,{"inputs":[{"name":"annotatable"}],"output":{"name":"annotatable"}}],[11,"fmt","","",219,{"inputs":[{"name":"annotatable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"attrs","","",219,null],[11,"fold_attrs","","",219,{"inputs":[{"name":"annotatable"},{"name":"vec"}],"output":{"name":"annotatable"}}],[11,"expect_item","","",219,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"map_item_or","","",219,{"inputs":[{"name":"annotatable"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",219,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"expect_impl_item","","",219,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"default","","",215,{"inputs":[{"name":"maceager"}],"output":{"name":"maceager"}}],[11,"expr","","",215,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",215,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",215,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",215,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",215,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",215,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",215,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_items","","",215,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_impl_items","","",215,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_stmts","","",215,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_pat","","",215,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_ty","","",215,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"clone","","",226,{"inputs":[{"name":"dummyresult"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",226,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",226,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",226,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",226,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",226,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",226,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_pat","","",226,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_items","","",226,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_impl_items","","",226,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_stmts","","",226,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"new","","",216,{"inputs":[{"name":"blockinfo"}],"output":{"name":"blockinfo"}}],[11,"new","","",217,{"inputs":[{"name":"extctxt"},{"name":"parsesess"},{"name":"crateconfig"},{"name":"expansionconfig"},{"name":"vec"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",217,null],[11,"codemap","","",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"parsesess"}}],[11,"cfg","","",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"crateconfig"}}],[11,"call_site","","",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"backtrace","","",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"expnid"}}],[11,"original_span","","Original span that caused the current exapnsion to happen.",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"mod_push","","",217,{"inputs":[{"name":"extctxt"},{"name":"ident"}],"output":null}],[11,"mod_pop","","",217,{"inputs":[{"name":"extctxt"}],"output":null}],[11,"mod_path","","",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"bt_push","","",217,{"inputs":[{"name":"extctxt"},{"name":"expninfo"}],"output":null}],[11,"bt_pop","","",217,{"inputs":[{"name":"extctxt"}],"output":null}],[11,"insert_macro","","",217,{"inputs":[{"name":"extctxt"},{"name":"macrodef"}],"output":null}],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_warn","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_bug","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_note","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_help","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":null}],[11,"fileline_help","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"str"}],"output":null}],[11,"bug","","",217,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":null}],[11,"trace_macros","","",217,{"inputs":[{"name":"extctxt"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",217,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":null}],[11,"ident_of","","",217,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"ident"}}],[11,"std_path","","",217,null],[11,"name_of","","",217,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"name"}}],[11,"push_frame","","",218,{"inputs":[{"name":"syntaxenv"}],"output":null}],[11,"pop_frame","","",218,{"inputs":[{"name":"syntaxenv"}],"output":null}],[11,"find","","",218,{"inputs":[{"name":"syntaxenv"},{"name":"name"}],"output":{"name":"option"}}],[11,"insert","","",218,{"inputs":[{"name":"syntaxenv"},{"name":"name"},{"name":"syntaxextension"}],"output":null}],[11,"info","","",218,{"inputs":[{"name":"syntaxenv"}],"output":{"name":"blockinfo"}}],[0,"build","syntex_syntax::ext","",null,null],[8,"AstBuilder","syntex_syntax::ext::build","",null,null],[10,"path","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_ident","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[10,"path_global","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_all","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[10,"qpath","","",227,null],[10,"qpath_all","","",227,null],[10,"ty_mt","","",227,{"inputs":[{"name":"astbuilder"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[10,"ty","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ty_"}],"output":{"name":"p"}}],[10,"ty_path","","",227,{"inputs":[{"name":"astbuilder"},{"name":"path"}],"output":{"name":"p"}}],[10,"ty_sum","","",227,{"inputs":[{"name":"astbuilder"},{"name":"path"},{"name":"ownedslice"}],"output":{"name":"p"}}],[10,"ty_ident","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"ty_rptr","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_ptr","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_option","","",227,{"inputs":[{"name":"astbuilder"},{"name":"p"}],"output":{"name":"p"}}],[10,"ty_infer","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"p"}}],[10,"ty_vars","","",227,{"inputs":[{"name":"astbuilder"},{"name":"ownedslice"}],"output":{"name":"vec"}}],[10,"ty_vars_global","","",227,{"inputs":[{"name":"astbuilder"},{"name":"ownedslice"}],"output":{"name":"vec"}}],[10,"typaram","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"ownedslice"},{"name":"option"}],"output":{"name":"typaram"}}],[10,"trait_ref","","",227,{"inputs":[{"name":"astbuilder"},{"name":"path"}],"output":{"name":"traitref"}}],[10,"poly_trait_ref","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[10,"typarambound","","",227,{"inputs":[{"name":"astbuilder"},{"name":"path"}],"output":{"name":"typarambound"}}],[10,"lifetime","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[10,"lifetime_def","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[10,"stmt_expr","","",227,{"inputs":[{"name":"astbuilder"},{"name":"p"}],"output":{"name":"p"}}],[10,"stmt_let","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[10,"stmt_let_typed","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"stmt_item","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"block","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[10,"block_expr","","",227,{"inputs":[{"name":"astbuilder"},{"name":"p"}],"output":{"name":"p"}}],[10,"block_all","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[10,"expr","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"expr_"}],"output":{"name":"p"}}],[10,"expr_path","","",227,{"inputs":[{"name":"astbuilder"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_qpath","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_ident","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_self","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_binary","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"binop_"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_deref","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_unary","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_addr_of","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_mut_addr_of","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_field_access","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_tup_field_access","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_call","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_ident","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_global","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_method_call","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_block","","",227,{"inputs":[{"name":"astbuilder"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_cast","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"field_imm","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[10,"expr_struct","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_struct_ident","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_lit","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"lit_"}],"output":{"name":"p"}}],[10,"expr_usize","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_isize","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[10,"expr_u8","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[10,"expr_u32","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[10,"expr_bool","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[10,"expr_vec","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_vec_ng","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_vec_slice","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_str","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[10,"expr_some","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_none","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_break","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_tuple","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_fail","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[10,"expr_unreachable","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_ok","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_err","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_try","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"pat_"}],"output":{"name":"p"}}],[10,"pat_wild","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_lit","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_ident","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"pat_ident_binding_mode","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[10,"pat_enum","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_struct","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_tuple","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_some","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_none","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_ok","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_err","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"arm","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[10,"arm_unreachable","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"arm"}}],[10,"expr_match","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_if","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[10,"expr_loop","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_fn_decl","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda0","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda1","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"lambda_expr","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_expr_0","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_expr_1","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"lambda_stmts","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_0","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_1","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[10,"item","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"item_"}],"output":{"name":"p"}}],[10,"arg","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[10,"fn_decl","","",227,{"inputs":[{"name":"astbuilder"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn_poly","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"variant","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[10,"item_enum_poly","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_enum","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[10,"item_struct_poly","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_struct","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[10,"item_mod","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"item_static","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_const","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_ty_poly","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_ty","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[10,"attribute","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"p"}],"output":{"name":"attribute"}}],[10,"meta_word","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[10,"meta_list","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[10,"meta_name_value","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"internedstring"},{"name":"lit_"}],"output":{"name":"p"}}],[10,"item_use","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_use_simple","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_simple_","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_list","","",227,null],[10,"item_use_glob","","",227,{"inputs":[{"name":"astbuilder"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[11,"path","syntex_syntax::ext::base","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",217,null],[11,"qpath_all","","Constructs a qualified path.",217,null],[11,"ty_mt","","",217,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ty_"}],"output":{"name":"p"}}],[11,"ty_path","","",217,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"p"}}],[11,"ty_sum","","",217,{"inputs":[{"name":"extctxt"},{"name":"path"},{"name":"ownedslice"}],"output":{"name":"p"}}],[11,"ty_ident","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"ty_rptr","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_ptr","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_option","","",217,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_infer","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"typaram","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"ownedslice"},{"name":"option"}],"output":{"name":"typaram"}}],[11,"ty_vars","","",217,{"inputs":[{"name":"extctxt"},{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"ty_vars_global","","",217,{"inputs":[{"name":"extctxt"},{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"trait_ref","","",217,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",217,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",217,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_let","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_let_typed","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"block","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[11,"stmt_item","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"block_expr","","",217,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"block_all","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"expr_"}],"output":{"name":"p"}}],[11,"expr_path","","",217,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_ident","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_self","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_binary","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"binop_"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_deref","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_unary","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_field_access","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_tup_field_access","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_addr_of","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_mut_addr_of","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_call","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_ident","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_global","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_method_call","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_block","","",217,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"field_imm","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_struct_ident","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_lit","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"lit_"}],"output":{"name":"p"}}],[11,"expr_usize","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_isize","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[11,"expr_u32","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[11,"expr_u8","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[11,"expr_bool","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[11,"expr_vec","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_vec_ng","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_vec_slice","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_str","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_cast","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_some","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_none","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_break","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_tuple","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_fail","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_unreachable","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_ok","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_err","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_try","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"pat_"}],"output":{"name":"p"}}],[11,"pat_wild","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_lit","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_ident","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"pat_ident_binding_mode","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[11,"pat_enum","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_struct","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_tuple","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_some","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_none","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_ok","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_err","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"arm","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_if","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr_loop","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_fn_decl","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda0","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda1","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_expr","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_0","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_1","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_stmts","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_0","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_1","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[11,"arg","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",217,{"inputs":[{"name":"extctxt"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"item","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"item_"}],"output":{"name":"p"}}],[11,"item_fn_poly","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_fn","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"variant","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[11,"item_enum_poly","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_enum","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[11,"item_struct","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[11,"item_struct_poly","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_mod","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"item_static","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_const","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_ty_poly","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_ty","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"attribute","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"attribute"}}],[11,"meta_word","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"meta_list","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[11,"meta_name_value","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"},{"name":"lit_"}],"output":{"name":"p"}}],[11,"item_use","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_use_simple","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_simple_","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_list","","",217,null],[11,"item_use_glob","","",217,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[0,"cfg","syntex_syntax::ext","",null,null],[5,"expand_cfg","syntex_syntax::ext::cfg","",null,null],[0,"concat","syntex_syntax::ext","",null,null],[5,"expand_syntax_ext","syntex_syntax::ext::concat","",null,null],[0,"concat_idents","syntex_syntax::ext","",null,null],[5,"expand_syntax_ext","syntex_syntax::ext::concat_idents","",null,null],[0,"deriving","syntex_syntax::ext","The compiler code necessary to implement the `#[derive]` extensions.",null,null],[5,"register_all","syntex_syntax::ext::deriving","",null,{"inputs":[{"name":"syntaxenv"}],"output":null}],[0,"bounds","","",null,null],[5,"expand_deriving_unsafe_bound","syntex_syntax::ext::deriving::bounds","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_copy","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"clone","syntex_syntax::ext::deriving","",null,null],[5,"expand_deriving_clone","syntex_syntax::ext::deriving::clone","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"encodable","syntex_syntax::ext::deriving","The compiler code necessary to implement the `#[derive(Encodable)]`\n(and `Decodable`, in decodable.rs) extension.  The idea here is that\ntype-defining items may be tagged with `#[derive(Encodable, Decodable)]`.",null,null],[5,"expand_deriving_rustc_encodable","syntex_syntax::ext::deriving::encodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_encodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"decodable","syntex_syntax::ext::deriving","The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.",null,null],[5,"expand_deriving_rustc_decodable","syntex_syntax::ext::deriving::decodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_decodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"hash","syntex_syntax::ext::deriving","",null,null],[5,"expand_deriving_hash","syntex_syntax::ext::deriving::hash","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"debug","syntex_syntax::ext::deriving","",null,null],[5,"expand_deriving_debug","syntex_syntax::ext::deriving::debug","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"default","syntex_syntax::ext::deriving","",null,null],[5,"expand_deriving_default","syntex_syntax::ext::deriving::default","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"primitive","syntex_syntax::ext::deriving","",null,null],[5,"expand_deriving_from_primitive","syntex_syntax::ext::deriving::primitive","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"partial_eq","syntex_syntax::ext::deriving","",null,null],[5,"expand_deriving_partial_eq","syntex_syntax::ext::deriving::partial_eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"eq","syntex_syntax::ext::deriving","",null,null],[5,"expand_deriving_eq","syntex_syntax::ext::deriving::eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"partial_ord","syntex_syntax::ext::deriving","",null,null],[4,"OrderingOp","syntex_syntax::ext::deriving::partial_ord","",null,null],[13,"PartialCmpOp","","",228,null],[13,"LtOp","","",228,null],[13,"LeOp","","",228,null],[13,"GtOp","","",228,null],[13,"GeOp","","",228,null],[5,"expand_deriving_partial_ord","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"some_ordering_collapsed","","",null,null],[5,"cs_partial_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[11,"clone","","",228,{"inputs":[{"name":"orderingop"}],"output":{"name":"orderingop"}}],[0,"ord","syntex_syntax::ext::deriving","",null,null],[5,"expand_deriving_ord","syntex_syntax::ext::deriving::ord","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"ordering_collapsed","","",null,null],[5,"cs_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[0,"generic","syntex_syntax::ext::deriving","Some code that abstracts away much of the boilerplate of writing\n`derive` instances for traits. Among other things it manages getting\naccess to the fields of the 4 different sorts of structs and enum\nvariants, as well as creating the method and impl ast instances.",null,null],[3,"TraitDef","syntex_syntax::ext::deriving::generic","",null,null],[12,"span","","The span for the current #[derive(Foo)] header.",229,null],[12,"attributes","","",229,null],[12,"path","","Path of the trait, including any type parameters",229,null],[12,"additional_bounds","","Additional bounds required of any type parameters of the type,\nother than the current trait",229,null],[12,"generics","","Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`",229,null],[12,"is_unsafe","","Is it an `unsafe` trait?",229,null],[12,"methods","","",229,null],[12,"associated_types","","",229,null],[3,"MethodDef","","",null,null],[12,"name","","name of the method",230,null],[12,"generics","","List of generics, e.g. `R: rand::Rng`",230,null],[12,"explicit_self","","Whether there is a self argument (outer Option) i.e. whether\nthis is a static function, and whether it is a pointer (inner\nOption)",230,null],[12,"args","","Arguments other than the self argument",230,null],[12,"ret_ty","","Return type",230,null],[12,"attributes","","",230,null],[12,"is_unsafe","","",230,null],[12,"combine_substructure","","",230,null],[3,"Substructure","","All the data about the data structure/method being derived upon.",null,null],[12,"type_ident","","ident of self",231,null],[12,"method_ident","","ident of the method",231,null],[12,"self_args","","dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments",231,null],[12,"nonself_args","","verbatim access to any other arguments",231,null],[12,"fields","","",231,null],[3,"FieldInfo","","Summary of the relevant parts of a struct/enum field.",null,null],[12,"span","","",232,null],[12,"name","","None for tuple structs/normal enum variants, Some for normal\nstructs/struct enum variants.",232,null],[12,"self_","","The expression corresponding to this field of `self`\n(specifically, a reference to it).",232,null],[12,"other","","The expressions corresponding to references to this field in\nthe other `Self` arguments.",232,null],[12,"attrs","","The attributes on the field",232,null],[4,"StaticFields","","Fields for a static method",null,null],[13,"Unnamed","","Tuple structs/enum variants like this.",233,null],[13,"Named","","Normal structs/struct variants.",233,null],[4,"SubstructureFields","","A summary of the possible sets of fields.",null,null],[13,"Struct","","",234,null],[13,"EnumMatching","","Matching variants of the enum: variant index, ast::Variant,\nfields: the field name is only non-`None` in the case of a struct\nvariant.",234,null],[13,"EnumNonMatchingCollapsed","","Non-matching variants of the enum, but with all state hidden from\nthe consequent code.  The first component holds `Ident`s for all of\nthe `Self` arguments; the second component is a slice of all of the\nvariants for the enum itself, and the third component is a list of\n`Ident`s bound to the variant index values for each of the actual\ninput `Self` arguments.",234,null],[13,"StaticStruct","","A static method where `Self` is a struct.",234,null],[13,"StaticEnum","","A static method where `Self` is an enum.",234,null],[5,"combine_substructure","","",null,{"inputs":[{"name":"combinesubstructurefunc"}],"output":{"name":"refcell"}}],[5,"cs_fold","","Fold the fields. `use_foldl` controls whether this is done\nleft-to-right (`true`) or right-to-left (`false`).",null,{"inputs":[{"name":"bool"},{"name":"f"},{"name":"p"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_same_method","","Call the method that is being derived on all the fields, and then\nprocess the collected results. i.e.",null,{"inputs":[{"name":"f"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_same_method_fold","","Fold together the results of calling the derived method on all the\nfields. `use_foldl` controls whether this is done left-to-right\n(`true`) or right-to-left (`false`).",null,{"inputs":[{"name":"bool"},{"name":"f"},{"name":"p"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_binop","","Use a given binop to combine the result of calling the derived method\non all the fields.",null,{"inputs":[{"name":"binop_"},{"name":"p"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_or","","cs_binop with binop == or",null,{"inputs":[{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_and","","cs_binop with binop == and",null,{"inputs":[{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[0,"ty","","A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use\nwhen specifying impls to be derived.",null,null],[3,"Path","syntex_syntax::ext::deriving::generic::ty","A path, e.g. `::std::option::Option::<i32>` (global). Has support\nfor type parameters and a lifetime.",null,null],[12,"path","","",235,null],[12,"lifetime","","",235,null],[12,"params","","",235,null],[12,"global","","",235,null],[3,"LifetimeBounds","","Lifetimes and bounds on type parameters",null,null],[12,"lifetimes","","",236,null],[12,"bounds","","",236,null],[4,"PtrTy","","The types of pointers",null,null],[13,"Borrowed","","&'lifetime mut",237,null],[13,"Raw","","*mut",237,null],[4,"Ty","","A type. Supports pointers, Self, and literals",null,null],[13,"Self_","","",238,null],[13,"Ptr","","&/Box/ Ty",238,null],[13,"Literal","","mod::mod::Type<[lifetime], [Params...]>, including a plain type\nparameter, and things like `i32`",238,null],[13,"Tuple","","includes unit",238,null],[5,"borrowed_ptrty","","",null,{"inputs":[],"output":{"name":"ptrty"}}],[5,"borrowed","","",null,{"inputs":[{"name":"box"}],"output":{"name":"ty"}}],[5,"borrowed_explicit_self","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"borrowed_self","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"nil_ty","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"get_explicit_self","","",null,null],[11,"eq","","",237,{"inputs":[{"name":"ptrty"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"ptrty"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"clone","","",237,{"inputs":[{"name":"ptrty"}],"output":{"name":"ptrty"}}],[11,"eq","","",235,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",235,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"clone","","",235,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"new","","",235,{"inputs":[{"name":"path"},{"name":"vec"}],"output":{"name":"path"}}],[11,"new_local","","",235,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"path"}}],[11,"new_","","",235,{"inputs":[{"name":"path"},{"name":"vec"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"path"}}],[11,"to_ty","","",235,{"inputs":[{"name":"path"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",235,{"inputs":[{"name":"path"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"eq","","",238,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",238,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"clone","","",238,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[11,"to_ty","","",238,{"inputs":[{"name":"ty"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",238,{"inputs":[{"name":"ty"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",236,{"inputs":[{"name":"lifetimebounds"}],"output":{"name":"lifetimebounds"}}],[11,"empty","","",236,{"inputs":[{"name":"lifetimebounds"}],"output":{"name":"lifetimebounds"}}],[11,"to_generics","","",236,{"inputs":[{"name":"lifetimebounds"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"generics"}}],[6,"CombineSubstructureFunc","syntex_syntax::ext::deriving::generic","Combine the values of all the fields together. The last argument is\nall the fields of all the structures.",null,null],[6,"EnumNonMatchCollapsedFunc","","Deal with non-matching enum variants.  The tuple is a list of\nidentifiers (one for each `Self` argument, which could be any of the\nvariants since they have been collapsed together) and the identifiers\nholding the variant index value for each of the `Self` arguments.  The\nlast argument is all the non-`Self` args of the method being derived.",null,null],[11,"expand","","",229,{"inputs":[{"name":"traitdef"},{"name":"extctxt"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"env","syntex_syntax::ext","",null,null],[5,"expand_option_env","syntex_syntax::ext::env","",null,null],[5,"expand_env","","",null,null],[0,"expand","syntex_syntax::ext","",null,null],[3,"IdentRenamer","syntex_syntax::ext::expand","A tree-folder that applies every rename in its (mutable) list\nto every identifier, including both bindings and varrefs\n(and lots of things that will turn out to be neither)",null,null],[3,"PatIdentRenamer","","A tree-folder that applies every rename in its list to\nthe idents that are in PatIdent patterns. This is more narrowly\nfocused than IdentRenamer, and is needed for FnDecl,\nwhere we want to rename the args but not the fn name or the generics etc.",null,null],[3,"MacroExpander","","A tree-folder that performs macro expansion",null,null],[12,"cx","","",239,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",240,null],[12,"features","","",240,null],[12,"recursion_limit","","",240,null],[12,"trace_mac","","",240,null],[5,"expand_expr","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_item","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_item_mac","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_block","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_block_elts","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_type","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_crate","","",null,null],[5,"check_for_macros","","Check that there are no macro invocations left in the AST:",null,{"inputs":[{"name":"parsesess"},{"name":"crate"}],"output":null}],[11,"fold_ident","","",241,{"inputs":[{"name":"identrenamer"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_mac","","",241,{"inputs":[{"name":"identrenamer"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_pat","","",242,{"inputs":[{"name":"patidentrenamer"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",242,{"inputs":[{"name":"patidentrenamer"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"new","","",239,{"inputs":[{"name":"macroexpander"},{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"fold_expr","","",239,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_pat","","",239,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_item","","",239,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_underscore","","",239,{"inputs":[{"name":"macroexpander"},{"name":"item_"}],"output":{"name":"item_"}}],[11,"fold_stmt","","",239,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_block","","",239,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_arm","","",239,{"inputs":[{"name":"macroexpander"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_trait_item","","",239,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",239,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_ty","","",239,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"new_span","","",239,{"inputs":[{"name":"macroexpander"},{"name":"span"}],"output":{"name":"span"}}],[11,"default","","",240,{"inputs":[{"name":"expansionconfig"},{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",240,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_asm","","",240,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",240,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",240,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",240,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",240,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",240,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_pushpop_unsafe","","",240,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[0,"log_syntax","syntex_syntax::ext","",null,null],[5,"expand_syntax_ext","syntex_syntax::ext::log_syntax","",null,null],[0,"mtwt","syntex_syntax::ext","Machinery for hygienic macros, as described in the MTWT[1] paper.",null,null],[3,"SCTable","syntex_syntax::ext::mtwt","The SCTable contains a table of SyntaxContext_'s. It\nrepresents a flattened tree structure, to avoid having\nmanaged pointers everywhere (that caused an ICE).\nthe mark_memo and rename_memo fields are side-tables\nthat ensure that adding the same mark to the same context\ngives you back the same context as before. This shouldn't\nchange the semantics--everything here is immutable--but\nit should cut down on memory use *a lot*; applying a mark\nto a tree containing 50 identifiers would otherwise generate\n50 new contexts",null,null],[4,"SyntaxContext_","","",null,null],[13,"EmptyCtxt","","",243,null],[13,"Mark","","",243,null],[13,"Rename","","flattening the name and syntaxcontext into the rename...\nHIDDEN INVARIANTS:\n1) the first name in a Rename node\ncan only be a programmer-supplied name.\n2) Every Rename node with a given Name in the\n\"to\" slot must have the same name and context\nin the \"from\" slot. In essence, they're all\npointers to a single \"rename\" event node.",243,null],[13,"IllegalCtxt","","actually, IllegalCtxt may not be necessary.",243,null],[5,"apply_mark","","Extend a syntax context with a given mark",null,{"inputs":[{"name":"mrk"},{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[5,"apply_rename","","Extend a syntax context with a given rename",null,{"inputs":[{"name":"ident"},{"name":"name"},{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[5,"apply_renames","","Apply a list of renamings to a context",null,{"inputs":[{"name":"renamelist"},{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[5,"with_sctable","","Fetch the SCTable from TLS, create one if it doesn't yet exist.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"display_sctable","","Print out an SCTable for debugging",null,{"inputs":[{"name":"sctable"}],"output":null}],[5,"clear_tables","","Clear the tables from TLD to reclaim memory.",null,{"inputs":[],"output":null}],[5,"reset_tables","","Reset the tables to their initial state",null,{"inputs":[],"output":null}],[5,"resolve","","Resolve a syntax object to a name, per MTWT.",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[5,"marksof","","Compute the marks associated with a syntax context.",null,{"inputs":[{"name":"syntaxcontext"},{"name":"name"}],"output":{"name":"vec"}}],[5,"outer_mark","","Return the outer mark for a context with a mark at the outside.\nFAILS when outside is not a mark.",null,{"inputs":[{"name":"syntaxcontext"}],"output":{"name":"mrk"}}],[6,"RenameList","","A list of ident->name renamings",null,null],[11,"clone","","",243,{"inputs":[{"name":"syntaxcontext_"}],"output":{"name":"syntaxcontext_"}}],[11,"fmt","","",243,{"inputs":[{"name":"syntaxcontext_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",243,null],[11,"decode","","",243,{"inputs":[{"name":"syntaxcontext_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",243,{"inputs":[{"name":"syntaxcontext_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",243,{"inputs":[{"name":"syntaxcontext_"},{"name":"syntaxcontext_"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"syntaxcontext_"},{"name":"syntaxcontext_"}],"output":{"name":"bool"}}],[0,"quote","syntex_syntax::ext","",null,null],[5,"parse_expr_panic","syntex_syntax::ext::quote","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[5,"expand_quote_matcher","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[8,"ToTokens","syntex_syntax::ext::quote::rt","",null,null],[10,"to_tokens","","",244,{"inputs":[{"name":"totokens"},{"name":"extctxt"}],"output":{"name":"vec"}}],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",245,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_expr","","",245,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_stmt","","",245,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_tts","","",245,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",81,{"inputs":[{"name":"tokentree"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","collections::vec","",169,{"inputs":[{"name":"vec"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::codemap","",128,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","core::option","",246,{"inputs":[{"name":"option"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",17,{"inputs":[{"name":"ident"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",20,{"inputs":[{"name":"path"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"ty"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",31,{"inputs":[{"name":"block"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",25,{"inputs":[{"name":"generics"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",26,{"inputs":[{"name":"whereclause"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",199,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",199,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",199,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",199,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",199,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",199,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",35,{"inputs":[{"name":"arm"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",50,{"inputs":[{"name":"arg"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",199,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",199,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ext::quote::rt","",125,{"inputs":[{"name":"attribute"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",247,{"inputs":[{"name":"lit"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntex_syntax::ext::base","",217,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",217,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_expr","","",217,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",217,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"vec"}}],[0,"source_util","syntex_syntax::ext","",null,null],[5,"expand_line","syntex_syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */\nThe filemap (`loc.file`) contains a bunch more information we could spit\nout if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr\nThis is generally a bad idea because it's going to behave\nunhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"trace_macros","syntex_syntax::ext","",null,null],[5,"expand_trace_macros","syntex_syntax::ext::trace_macros","",null,null],[0,"tt","syntex_syntax::ext","",null,null],[0,"transcribe","syntex_syntax::ext::tt","",null,null],[3,"TtReader","syntex_syntax::ext::tt::transcribe","",null,null],[12,"sp_diag","","",248,null],[12,"cur_tok","","",248,null],[12,"cur_span","","",248,null],[12,"desugar_doc_comments","","Transform doc comments. Only useful in macro invocations",248,null],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if\n`src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n(and should) be None.",null,{"inputs":[{"name":"spanhandler"},{"name":"option"},{"name":"option"},{"name":"vec"}],"output":{"name":"ttreader"}}],[5,"new_tt_reader_with_doc_flag","","The extra `desugar_doc_comments` flag enables reading doc comments\nlike any other attribute which consists of `meta` and surrounding #[ ] tokens.",null,{"inputs":[{"name":"spanhandler"},{"name":"option"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"ttreader"}}],[5,"tt_next_token","","Return the next token from the TtReader.\nEFFECT: advances the reader's token field",null,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",248,{"inputs":[{"name":"ttreader"}],"output":{"name":"ttreader"}}],[0,"macro_parser","syntex_syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals,\nonly by calling out to the main rust parser for named nonterminals (which it\ncommits to fully when it hits one in a grammar). This means that there are no\ncompleter or predictor rules, and therefore no need to store one column per\ntoken: instead, there's a set of current Earley items and a set of next\nones. Instead of NTs, we have a special case for Kleene star. The big-O, in\npathological cases, is worse than traditional Earley parsing, but it's an\neasier fit for Macro-by-Example-style rules, and I think the overhead is\nlower. (In order to prevent the pathological case, we'd need to lazily\nconstruct the resulting `NamedMatch`es at the very end. It'd be a pain,\nand require more memory to keep around old items, but it would also save\noverhead)",null,null],[3,"MatcherPos","syntex_syntax::ext::tt::macro_parser","",null,null],[4,"NamedMatch","","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL:\nso it is associated with a single ident in a parse, and all\n`MatchedNonterminal`s in the NamedMatch have the same nonterminal type\n(expr, item, etc). Each leaf in a single NamedMatch corresponds to a\nsingle token::MATCH_NONTERMINAL in the TokenTree that produced it.",null,null],[13,"MatchedSeq","","",249,null],[13,"MatchedNonterminal","","",249,null],[4,"ParseResult","","",null,null],[13,"Success","","",250,null],[13,"Failure","","",250,null],[13,"Error","","",250,null],[5,"count_names","","",null,null],[5,"initial_matcher_pos","","",null,{"inputs":[{"name":"rc"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"box"}}],[5,"nameize","","",null,null],[5,"token_name_eq","","Perform a token equality check, ignoring syntax context (that is, an\nunhygienic comparison)",null,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[5,"parse","","",null,null],[5,"parse_nt","","",null,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"nonterminal"}}],[6,"NamedParseResult","","",null,null],[6,"PositionalParseResult","","",null,null],[11,"clone","","",251,{"inputs":[{"name":"matcherpos"}],"output":{"name":"matcherpos"}}],[0,"macro_rules","syntex_syntax::ext::tt","",null,null],[5,"compile","syntex_syntax::ext::tt::macro_rules","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"extctxt"},{"name":"macrodef"}],"output":{"name":"syntaxextension"}}],[14,"register_diagnostic!","syntex_syntax","",null,null],[14,"span_fatal!","","",null,null],[14,"span_err!","","",null,null],[14,"span_err_or_warn!","","",null,null],[14,"span_warn!","","",null,null],[14,"span_note!","","",null,null],[14,"span_help!","","",null,null],[14,"fileline_help!","","",null,null],[14,"register_diagnostics!","","",null,null],[14,"register_long_diagnostics!","","",null,null],[14,"walk_list!","","",null,null],[11,"name","syntex_syntax::ptr","",199,{"inputs":[{"name":"p"}],"output":{"name":"internedstring"}}],[11,"value_str","","",199,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"meta_item_list","","",199,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"span","","",199,{"inputs":[{"name":"p"}],"output":{"name":"span"}}],[11,"move_map","syntex_syntax::owned_slice","",170,{"inputs":[{"name":"ownedslice"},{"name":"f"}],"output":{"name":"ownedslice"}}],[11,"is_eof","syntex_syntax::ext::tt::transcribe","",248,{"inputs":[{"name":"ttreader"}],"output":{"name":"bool"}}],[11,"next_token","","",248,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"fatal","","",248,{"inputs":[{"name":"ttreader"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",248,{"inputs":[{"name":"ttreader"},{"name":"str"}],"output":null}],[11,"peek","","",248,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}]],"paths":[[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[3,"ErrorInfo"],[3,"Registry"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"AbiArchitecture"],[3,"AbiData"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Delimited"],[3,"SequenceRepetition"],[3,"Mac_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField_"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"MetaItem_"],[4,"BindingMode"],[4,"Pat_"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"MacStmtStyle"],[4,"Decl_"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[4,"CaptureClause"],[4,"KleeneOp"],[4,"TokenTree"],[4,"StrStyle"],[4,"Sign"],[4,"LitIntType"],[4,"Lit_"],[4,"TraitItem_"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"PrimTy"],[4,"Ty_"],[4,"AsmDialect"],[4,"Unsafety"],[4,"Constness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ExplicitSelf_"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"StructFieldKind"],[4,"VariantData"],[4,"Item_"],[4,"ForeignItem_"],[8,"NodeIdAssigner"],[8,"IntSign"],[3,"Name"],[3,"SyntaxContext"],[6,"Stmt"],[3,"AttrId"],[3,"IdRange"],[3,"IdVisitor"],[3,"IdRangeComputingVisitor"],[8,"IdVisitingOperation"],[3,"Stability"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"AttrMetaMethods"],[8,"AttributeMethods"],[6,"Attribute"],[6,"MetaItem"],[3,"Span"],[3,"Spanned"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"LineInfo"],[3,"FileLines"],[3,"MultiByteChar"],[3,"FileMap"],[3,"CodeMap"],[4,"ExpnFormat"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[8,"Pos"],[8,"FileLoader"],[3,"BytePos"],[3,"CharPos"],[3,"ExpnId"],[3,"RealFileLoader"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"SpanHandler"],[3,"Handler"],[4,"RenderSpan"],[4,"ColorConfig"],[4,"Level"],[8,"Emitter"],[3,"FatalError"],[3,"ExplicitBug"],[3,"EmitterWriter"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"MoveMap"],[8,"Folder"],[3,"Vec"],[3,"OwnedSlice"],[3,"ParseSess"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathParsingMode"],[4,"BoundParsingMode"],[4,"ParsePub"],[4,"TokenType"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"IdentStyle"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[4,"Keyword"],[3,"InternedString"],[3,"SeqSep"],[4,"ObsoleteSyntax"],[8,"ParserObsoleteMethods"],[3,"P"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"MacEager"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"Annotatable"],[4,"SyntaxExtension"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[3,"DummyResult"],[8,"AstBuilder"],[4,"OrderingOp"],[3,"TraitDef"],[3,"MethodDef"],[3,"Substructure"],[3,"FieldInfo"],[4,"StaticFields"],[4,"SubstructureFields"],[3,"Path"],[3,"LifetimeBounds"],[4,"PtrTy"],[4,"Ty"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[4,"SyntaxContext_"],[8,"ToTokens"],[8,"ExtParseUtils"],[4,"Option"],[6,"Lit"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"MatcherPos"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['term'] = {"items":[[0,"","term","Terminal formatting library.",null,null],[4,"Attr","","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",1,null],[12,"bools","","Map of capability name to boolean value",1,null],[12,"numbers","","Map of capability name to numeric value",1,null],[12,"strings","","Map of capability name to raw (unexpanded) string",1,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","A terminfo creation error.",null,null],[13,"TermUnset","","TermUnset Indicates that the environment doesn't include enough information to find\nthe terminfo entry.",2,null],[13,"MalformedTerminfo","","MalformedTerminfo indicates that parsing the terminfo entry failed.",2,null],[13,"IoError","","io::Error forwards any io::Errors encountered when finding or reading the terminfo entry.",2,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",3,null],[13,"Number","","",3,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",3,{"inputs":[{"name":"param"}],"output":{"name":"param"}}],[11,"new","","Return a new zero-initialized Variables",4,{"inputs":[{"name":"variables"}],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",1,{"inputs":[{"name":"terminfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_env","","Create a TermInfo based on current environment.",1,{"inputs":[{"name":"terminfo"}],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",1,{"inputs":[{"name":"terminfo"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",1,{"inputs":[{"name":"terminfo"},{"name":"path"}],"output":{"name":"result"}}],[11,"fg","","",5,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",5,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",5,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",5,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"cursor_up","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"delete_line","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"carriage_return","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"get_ref","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"get_mut","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"into_inner","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",5,{"inputs":[{"name":"terminfoterminal"},{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",5,{"inputs":[{"name":"terminfoterminal"},{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",6,null],[10,"fg","","Sets the foreground color to the given color.",6,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",6,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)`\nif the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if\nthere was an I/O error.",6,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",6,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",6,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"cursor_up","","Moves the cursor up one line.",6,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",6,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",6,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",6,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"get_mut","","Gets a mutable reference to the stream inside",6,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",6,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[11,"clone","","",0,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"eq","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Attr"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Crate docs",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",9,null],[12,"dli_fbase","","",9,null],[12,"dli_sname","","",9,null],[12,"dli_saddr","","",9,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"putenv","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"usleep","","",null,null],[5,"recvfrom","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"mkfifo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"posix_memalign","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",10,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",10,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",10,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",10,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",10,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",10,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",10,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",10,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",10,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",10,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",10,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",10,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",10,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"fmt","core::num","",11,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"from_small","core::num::flt2dec::bignum","Makes a bignum from one digit.",12,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",12,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",12,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",12,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",12,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",12,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",12,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",12,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",12,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",12,null],[11,"eq","","",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",12,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",12,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::flt2dec::bignum::tests","Makes a bignum from one digit.",13,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",13,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",13,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",13,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",13,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",13,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",13,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",13,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",13,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",13,null],[11,"eq","","",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",13,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::flt2dec::decoder","",14,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",15,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec::strategy::grisu","",16,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",16,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",16,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",16,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num::flt2dec","",17,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",17,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",17,null],[11,"clone","","",18,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",18,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",18,null],[11,"fmt","","",19,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",20,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",20,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",21,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",22,null],[11,"eq","","",23,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",24,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",24,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",26,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",27,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",27,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",28,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",29,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",29,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",30,null],[11,"get","","Dereferences the content.",30,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",30,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",31,null],[11,"eq","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",31,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",32,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",32,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",33,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",34,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",35,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",36,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",36,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",36,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",37,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",37,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",37,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",37,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",38,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",39,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",40,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",41,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",42,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",43,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",39,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",39,null],[11,"swap","","Stores a value into the bool, returning the old value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",40,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",40,null],[11,"swap","","Stores a value into the isize, returning the old value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",41,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",41,null],[11,"swap","","Stores a value into the usize, returning the old value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",42,null],[11,"load","","Loads a value from the pointer.",42,null],[11,"store","","Stores a value into the pointer.",42,null],[11,"swap","","Stores a value into the pointer, returning the old value.",42,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",42,null],[11,"fmt","","",41,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",44,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",44,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",44,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",44,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",44,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",44,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",44,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",46,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",46,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",46,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",46,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",46,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",46,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",46,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",46,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",46,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",48,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",48,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",48,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",48,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",49,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",49,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",50,null],[11,"deref","","",49,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",51,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",51,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",51,null],[11,"clone","core::char","",52,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",53,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",52,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",55,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",54,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",56,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",56,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",57,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",58,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",60,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",59,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",61,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",61,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",62,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",63,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",64,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",65,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"nth","","",65,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",65,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",65,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",66,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",66,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",66,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",66,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",66,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",67,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"clone","","",68,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",68,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"clone","","",69,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",69,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",69,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",69,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",69,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"clone","","",70,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",70,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",70,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"clone","","",71,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",71,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"clone","","",72,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",72,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",73,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",74,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",75,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",34,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",33,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",75,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",76,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",76,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next","core::ops","",33,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",77,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",77,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",79,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",79,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",79,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",10,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",80,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",80,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",10,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",84,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",85,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",86,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",86,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",86,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",86,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",86,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",86,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",86,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",86,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",86,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",86,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",86,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",86,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",86,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",86,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",86,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",86,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",86,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",86,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",86,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",86,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",87,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",88,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",89,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",86,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",90,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",91,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",92,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",93,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",94,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",95,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",96,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",97,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",98,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",99,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",98,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",99,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",98,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",99,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",98,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",99,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",98,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",99,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",100,null],[11,"next","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"count","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",100,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",101,null],[11,"next","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"count","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",101,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",102,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",102,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",103,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",104,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next","","",105,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next","","",106,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next","","",107,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next","","",108,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"clone","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"count","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",109,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"count","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",110,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",111,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"count","","",111,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",111,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",111,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",111,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",112,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",113,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",114,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",113,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",113,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",113,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",118,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",119,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",120,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",121,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",122,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",122,null],[11,"matching","","",122,null],[11,"use_early_reject","","",123,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",123,null],[11,"matching","","",123,null],[11,"eq","core::str","",124,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",124,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",125,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",125,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",125,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",126,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",126,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",127,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",127,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",127,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"count","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",128,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",129,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",130,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",131,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",130,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",132,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",133,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",132,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",135,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",136,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",137,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",138,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",139,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",138,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",141,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",142,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",142,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",141,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",142,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",143,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",144,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",145,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",145,null],[11,"call_mut","","",145,null],[11,"call_once","","",145,null],[11,"next","","",144,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"next_back","","",144,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",147,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",147,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",147,null],[11,"finish","","",147,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",147,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",147,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",148,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",149,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",150,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",151,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",152,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",153,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",154,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",155,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",156,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",156,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",157,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",157,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",157,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",158,null],[11,"entry","","Adds a new entry to the set output.",159,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",159,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",159,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",160,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",160,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",160,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",161,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",161,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",161,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",162,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",163,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",164,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",165,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",166,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",167,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",168,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",169,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",170,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",170,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",171,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",171,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",171,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",171,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",171,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",171,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",171,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",171,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",171,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",171,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",171,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",171,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",31,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",44,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",172,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",172,null],[11,"clone","libc","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[17,"WNOHANG","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"Dl_info"],[4,"Option"],[3,"Wrapping"],[3,"Big32x40"],[3,"Big8x3"],[3,"Decoded"],[4,"FullDecoded"],[3,"Fp"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",8,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",8,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",8,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",10,null],[11,"make_place","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",8,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",10,null],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",8,null],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"fmt","alloc::arc","",11,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",12,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_unique","","",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc<T>`.",12,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",11,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",11,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",11,null],[11,"eq","","Equality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",12,null],[11,"borrow","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",13,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",13,null],[11,"clone","","Makes a clone of the `Rc<T>`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",14,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",14,null],[11,"clone","","Makes a clone of the `Weak<T>`.",14,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",14,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",15,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",15,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",15,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",15,null],[11,"cap","","Gets the capacity of the allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",15,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",15,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",15,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",15,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",15,null],[14,"log!","log","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"Box"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['unicode_xid'] = {"items":[[0,"","unicode_xid","Determine if a `char` is a valid identifier for a parser and/or lexer according to\n[Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.",null,null],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-derived-property is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",0,{"inputs":[{"name":"unicodexid"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",0,{"inputs":[{"name":"unicodexid"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
